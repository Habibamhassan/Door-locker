
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  000038fe  00003992  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800130  00800130  00003a62  2**0
                  ALLOC
  3 .stab         00003504  00000000  00000000  00003a64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000130c  00000000  00000000  00006f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000083b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008524  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a16d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000be08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bf68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c9c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__vector_3>
      10:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__vector_8>
      24:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 33       	cpi	r26, 0x3D	; 61
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 06 	call	0xc78	; 0xc78 <main>
      8a:	0c 94 7d 1c 	jmp	0x38fa	; 0x38fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e2       	ldi	r26, 0x21	; 33
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1d 1c 	jmp	0x383a	; 0x383a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 e2       	ldi	r24, 0x21	; 33
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1d 1c 	jmp	0x383a	; 0x383a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 11 1c 	jmp	0x3822	; 0x3822 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2d 1c 	jmp	0x385a	; 0x385a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HMI_ECU_newTimerTick>:
/* global variable used to know which case to enter when the call back function is called*/
uint8 call_back = 0;

/* call back function*/
void HMI_ECU_newTimerTick(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <HMI_ECU_newTimerTick+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	switch(call_back)
     b50:	80 91 36 01 	lds	r24, 0x0136
     b54:	28 2f       	mov	r18, r24
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	3a 83       	std	Y+2, r19	; 0x02
     b5a:	29 83       	std	Y+1, r18	; 0x01
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	9a 81       	ldd	r25, Y+2	; 0x02
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	91 05       	cpc	r25, r1
     b64:	39 f0       	breq	.+14     	; 0xb74 <HMI_ECU_newTimerTick+0x2e>
     b66:	29 81       	ldd	r18, Y+1	; 0x01
     b68:	3a 81       	ldd	r19, Y+2	; 0x02
     b6a:	22 30       	cpi	r18, 0x02	; 2
     b6c:	31 05       	cpc	r19, r1
     b6e:	09 f4       	brne	.+2      	; 0xb72 <HMI_ECU_newTimerTick+0x2c>
     b70:	61 c0       	rjmp	.+194    	; 0xc34 <HMI_ECU_newTimerTick+0xee>
     b72:	7d c0       	rjmp	.+250    	; 0xc6e <HMI_ECU_newTimerTick+0x128>
	{
	/* case 1 -> show the state of the door on the LCD*/
	case 1:
		g_tick++;
     b74:	80 91 30 01 	lds	r24, 0x0130
     b78:	90 91 31 01 	lds	r25, 0x0131
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	90 93 31 01 	sts	0x0131, r25
     b82:	80 93 30 01 	sts	0x0130, r24
		if(g_tick == NUMBER_OF_OVERFLOWS_PER_FIFTEEN_SECONDS)
     b86:	80 91 30 01 	lds	r24, 0x0130
     b8a:	90 91 31 01 	lds	r25, 0x0131
     b8e:	31 e0       	ldi	r19, 0x01	; 1
     b90:	89 3c       	cpi	r24, 0xC9	; 201
     b92:	93 07       	cpc	r25, r19
     b94:	99 f4       	brne	.+38     	; 0xbbc <HMI_ECU_newTimerTick+0x76>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
			LCD_displayString("The door is unlo");
     b9c:	80 e6       	ldi	r24, 0x60	; 96
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
			LCD_moveCursor(1,0);
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	0e 94 41 1a 	call	0x3482	; 0x3482 <LCD_moveCursor>
			LCD_displayString("cked!");
     bac:	81 e7       	ldi	r24, 0x71	; 113
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
			door_unlocked = 1;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	80 93 33 01 	sts	0x0133, r24
     bba:	59 c0       	rjmp	.+178    	; 0xc6e <HMI_ECU_newTimerTick+0x128>
		}
		else if(g_tick == (NUMBER_OF_OVERFLOWS_PER_FIFTEEN_SECONDS + NUMBER_OF_OVERFLOWS_PER_THREE_SECONDS))
     bbc:	80 91 30 01 	lds	r24, 0x0130
     bc0:	90 91 31 01 	lds	r25, 0x0131
     bc4:	22 e0       	ldi	r18, 0x02	; 2
     bc6:	84 32       	cpi	r24, 0x24	; 36
     bc8:	92 07       	cpc	r25, r18
     bca:	99 f4       	brne	.+38     	; 0xbf2 <HMI_ECU_newTimerTick+0xac>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
			LCD_displayString("The door is lock");
     bd2:	87 e7       	ldi	r24, 0x77	; 119
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
			LCD_moveCursor(1,0);
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	0e 94 41 1a 	call	0x3482	; 0x3482 <LCD_moveCursor>
			LCD_displayString("ing!");
     be2:	88 e8       	ldi	r24, 0x88	; 136
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
			door_locking = 1;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	80 93 34 01 	sts	0x0134, r24
     bf0:	3e c0       	rjmp	.+124    	; 0xc6e <HMI_ECU_newTimerTick+0x128>
		}
		else if(g_tick == ((2 * NUMBER_OF_OVERFLOWS_PER_FIFTEEN_SECONDS) + NUMBER_OF_OVERFLOWS_PER_THREE_SECONDS))
     bf2:	80 91 30 01 	lds	r24, 0x0130
     bf6:	90 91 31 01 	lds	r25, 0x0131
     bfa:	33 e0       	ldi	r19, 0x03	; 3
     bfc:	8d 3e       	cpi	r24, 0xED	; 237
     bfe:	93 07       	cpc	r25, r19
     c00:	b1 f5       	brne	.+108    	; 0xc6e <HMI_ECU_newTimerTick+0x128>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
			LCD_displayString("The door is lock");
     c08:	87 e7       	ldi	r24, 0x77	; 119
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
			LCD_moveCursor(1,0);
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	0e 94 41 1a 	call	0x3482	; 0x3482 <LCD_moveCursor>
			LCD_displayString("ed!");
     c18:	8d e8       	ldi	r24, 0x8D	; 141
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
			door_locked = 1;
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	80 93 35 01 	sts	0x0135, r24
			g_tick = 0;
     c26:	10 92 31 01 	sts	0x0131, r1
     c2a:	10 92 30 01 	sts	0x0130, r1
			call_back = 0;
     c2e:	10 92 36 01 	sts	0x0136, r1
     c32:	1d c0       	rjmp	.+58     	; 0xc6e <HMI_ECU_newTimerTick+0x128>
		}
		break;

		/* case 2 -> show an error msg on the LCD*/
	case 2:
		g_tick++;
     c34:	80 91 30 01 	lds	r24, 0x0130
     c38:	90 91 31 01 	lds	r25, 0x0131
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	90 93 31 01 	sts	0x0131, r25
     c42:	80 93 30 01 	sts	0x0130, r24
		if(g_tick == NUMBER_OF_OVERFLOWS_PER_ONE_MINUTE)
     c46:	80 91 30 01 	lds	r24, 0x0130
     c4a:	90 91 31 01 	lds	r25, 0x0131
     c4e:	27 e0       	ldi	r18, 0x07	; 7
     c50:	87 32       	cpi	r24, 0x27	; 39
     c52:	92 07       	cpc	r25, r18
     c54:	61 f4       	brne	.+24     	; 0xc6e <HMI_ECU_newTimerTick+0x128>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
			error_msg = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 32 01 	sts	0x0132, r24
			g_tick = 0;
     c62:	10 92 31 01 	sts	0x0131, r1
     c66:	10 92 30 01 	sts	0x0130, r1
			call_back = 0;
     c6a:	10 92 36 01 	sts	0x0136, r1
		}
		break;
	}
}
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <main>:

int main(void)
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	cf 54       	subi	r28, 0x4F	; 79
     c82:	d0 40       	sbci	r29, 0x00	; 0
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
	uint8 i; /* variable used in iterations*/
	uint8 receive; /* variable used to receive a byte from UART*/
	uint8 not_matched = 1; /* a flag used to indicate if the re-typed pass matches the previous one or not*/
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	8b af       	std	Y+59, r24	; 0x3b
	uint8 times = 0; /* a flag used to count the number of times the entered password is wrong*/
     c92:	1a ae       	std	Y+58, r1	; 0x3a
	uint8 my_pass[PASS_SIZE]; /* an array used to take the input password from the user*/
	uint8 options; /* variable used to store the options (+: open door, -: change password)*/

	/* initialization of the UART, LCD and setting the call back function*/

	Timer0_SetCallBack(HMI_ECU_newTimerTick);
     c94:	83 ea       	ldi	r24, 0xA3	; 163
     c96:	95 e0       	ldi	r25, 0x05	; 5
     c98:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <Timer0_SetCallBack>
	LCD_init();
     c9c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <LCD_init>
	UART_init(9600);
     ca0:	60 e8       	ldi	r22, 0x80	; 128
     ca2:	75 e2       	ldi	r23, 0x25	; 37
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <UART_init>

	/*Enable I-bit*/
	SREG |= (1<<7);
     cac:	af e5       	ldi	r26, 0x5F	; 95
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	ef e5       	ldi	r30, 0x5F	; 95
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	80 68       	ori	r24, 0x80	; 128
     cb8:	8c 93       	st	X, r24
     cba:	ea c0       	rjmp	.+468    	; 0xe90 <main+0x218>
	while(1)
	{
		while(not_matched == 1) /* the while loop will not be broken until the two passwords match each other*/
		{
			not_matched = 0;
     cbc:	1b ae       	std	Y+59, r1	; 0x3b
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
			LCD_displayString("Enter new pass:");
     cc4:	81 e9       	ldi	r24, 0x91	; 145
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
			LCD_moveCursor(1,0);
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	0e 94 41 1a 	call	0x3482	; 0x3482 <LCD_moveCursor>

			/* take the new password from the user*/
			HMI_enterPass(pass);
     cd4:	ce 01       	movw	r24, r28
     cd6:	ce 96       	adiw	r24, 0x3e	; 62
     cd8:	0e 94 c9 1a 	call	0x3592	; 0x3592 <HMI_enterPass>

			LCD_sendCommand(LCD_CLEAR_COMMAND);
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
			LCD_displayString("Re-enter pass:");
     ce2:	81 ea       	ldi	r24, 0xA1	; 161
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
			LCD_moveCursor(1,0);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	0e 94 41 1a 	call	0x3482	; 0x3482 <LCD_moveCursor>

			/* take the re-typed password from the user*/
			HMI_enterPass(re_pass);
     cf2:	ce 01       	movw	r24, r28
     cf4:	8c 5b       	subi	r24, 0xBC	; 188
     cf6:	9f 4f       	sbci	r25, 0xFF	; 255
     cf8:	0e 94 c9 1a 	call	0x3592	; 0x3592 <HMI_enterPass>

			/* send the two passwords to the CONTROL_ECU to check if they match each other or not*/
			UART_sendByte(HMI_ECU_READY);
     cfc:	80 e1       	ldi	r24, 0x10	; 16
     cfe:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
			while(UART_recieveByte() != CONTROL_ECU_READY){}
     d02:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
     d06:	80 32       	cpi	r24, 0x20	; 32
     d08:	e1 f7       	brne	.-8      	; 0xd02 <main+0x8a>
			UART_sendByte(CHECK_PASS);
     d0a:	81 e1       	ldi	r24, 0x11	; 17
     d0c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
			for(i=0; i<PASS_SIZE; i++)
     d10:	1d ae       	std	Y+61, r1	; 0x3d
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <main+0xc0>
			{
				while(UART_recieveByte() != CONTROL_ECU_READY){}
     d14:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
     d18:	80 32       	cpi	r24, 0x20	; 32
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <main+0x9c>
				UART_sendByte(pass[i]);
     d1c:	8d ad       	ldd	r24, Y+61	; 0x3d
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	ce 01       	movw	r24, r28
     d24:	ce 96       	adiw	r24, 0x3e	; 62
     d26:	fc 01       	movw	r30, r24
     d28:	e2 0f       	add	r30, r18
     d2a:	f3 1f       	adc	r31, r19
     d2c:	80 81       	ld	r24, Z
     d2e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>

			/* send the two passwords to the CONTROL_ECU to check if they match each other or not*/
			UART_sendByte(HMI_ECU_READY);
			while(UART_recieveByte() != CONTROL_ECU_READY){}
			UART_sendByte(CHECK_PASS);
			for(i=0; i<PASS_SIZE; i++)
     d32:	8d ad       	ldd	r24, Y+61	; 0x3d
     d34:	8f 5f       	subi	r24, 0xFF	; 255
     d36:	8d af       	std	Y+61, r24	; 0x3d
     d38:	8d ad       	ldd	r24, Y+61	; 0x3d
     d3a:	86 30       	cpi	r24, 0x06	; 6
     d3c:	58 f3       	brcs	.-42     	; 0xd14 <main+0x9c>
			{
				while(UART_recieveByte() != CONTROL_ECU_READY){}
				UART_sendByte(pass[i]);
			}
			for(i=0; i<PASS_SIZE; i++)
     d3e:	1d ae       	std	Y+61, r1	; 0x3d
     d40:	13 c0       	rjmp	.+38     	; 0xd68 <main+0xf0>
			{
				while(UART_recieveByte() != CONTROL_ECU_READY){}
     d42:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
     d46:	80 32       	cpi	r24, 0x20	; 32
     d48:	e1 f7       	brne	.-8      	; 0xd42 <main+0xca>
				UART_sendByte(re_pass[i]);
     d4a:	8d ad       	ldd	r24, Y+61	; 0x3d
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	ce 01       	movw	r24, r28
     d52:	8c 5b       	subi	r24, 0xBC	; 188
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	fc 01       	movw	r30, r24
     d58:	e2 0f       	add	r30, r18
     d5a:	f3 1f       	adc	r31, r19
     d5c:	80 81       	ld	r24, Z
     d5e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
			for(i=0; i<PASS_SIZE; i++)
			{
				while(UART_recieveByte() != CONTROL_ECU_READY){}
				UART_sendByte(pass[i]);
			}
			for(i=0; i<PASS_SIZE; i++)
     d62:	8d ad       	ldd	r24, Y+61	; 0x3d
     d64:	8f 5f       	subi	r24, 0xFF	; 255
     d66:	8d af       	std	Y+61, r24	; 0x3d
     d68:	8d ad       	ldd	r24, Y+61	; 0x3d
     d6a:	86 30       	cpi	r24, 0x06	; 6
     d6c:	50 f3       	brcs	.-44     	; 0xd42 <main+0xca>
			{
				while(UART_recieveByte() != CONTROL_ECU_READY){}
				UART_sendByte(re_pass[i]);
			}
			while(UART_recieveByte() != CONTROL_ECU_READY){}
     d6e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
     d72:	80 32       	cpi	r24, 0x20	; 32
     d74:	e1 f7       	brne	.-8      	; 0xd6e <main+0xf6>
			UART_sendByte(HMI_ECU_READY);
     d76:	80 e1       	ldi	r24, 0x10	; 16
     d78:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
			receive = UART_recieveByte();
     d7c:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
     d80:	8c af       	std	Y+60, r24	; 0x3c

			/* if the two passwords do not match each other, the user will be asked to try again*/
			if(receive == NOT_CORRECT_PASS)
     d82:	8c ad       	ldd	r24, Y+60	; 0x3c
     d84:	86 36       	cpi	r24, 0x66	; 102
     d86:	09 f0       	breq	.+2      	; 0xd8a <main+0x112>
     d88:	83 c0       	rjmp	.+262    	; 0xe90 <main+0x218>
			{
				LCD_sendCommand(LCD_CLEAR_COMMAND);
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
				LCD_displayString("Not matched!");
     d90:	80 eb       	ldi	r24, 0xB0	; 176
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
				LCD_moveCursor(1,0);
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	0e 94 41 1a 	call	0x3482	; 0x3482 <LCD_moveCursor>
				LCD_displayString("Try again!");
     da0:	8d eb       	ldi	r24, 0xBD	; 189
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	aa e7       	ldi	r26, 0x7A	; 122
     dae:	b4 e4       	ldi	r27, 0x44	; 68
     db0:	8d ab       	std	Y+53, r24	; 0x35
     db2:	9e ab       	std	Y+54, r25	; 0x36
     db4:	af ab       	std	Y+55, r26	; 0x37
     db6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db8:	6d a9       	ldd	r22, Y+53	; 0x35
     dba:	7e a9       	ldd	r23, Y+54	; 0x36
     dbc:	8f a9       	ldd	r24, Y+55	; 0x37
     dbe:	98 ad       	ldd	r25, Y+56	; 0x38
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	4a ef       	ldi	r20, 0xFA	; 250
     dc6:	54 e4       	ldi	r21, 0x44	; 68
     dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	89 ab       	std	Y+49, r24	; 0x31
     dd2:	9a ab       	std	Y+50, r25	; 0x32
     dd4:	ab ab       	std	Y+51, r26	; 0x33
     dd6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dd8:	69 a9       	ldd	r22, Y+49	; 0x31
     dda:	7a a9       	ldd	r23, Y+50	; 0x32
     ddc:	8b a9       	ldd	r24, Y+51	; 0x33
     dde:	9c a9       	ldd	r25, Y+52	; 0x34
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e8       	ldi	r20, 0x80	; 128
     de6:	5f e3       	ldi	r21, 0x3F	; 63
     de8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dec:	88 23       	and	r24, r24
     dee:	2c f4       	brge	.+10     	; 0xdfa <main+0x182>
		__ticks = 1;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	98 ab       	std	Y+48, r25	; 0x30
     df6:	8f a7       	std	Y+47, r24	; 0x2f
     df8:	3f c0       	rjmp	.+126    	; 0xe78 <main+0x200>
	else if (__tmp > 65535)
     dfa:	69 a9       	ldd	r22, Y+49	; 0x31
     dfc:	7a a9       	ldd	r23, Y+50	; 0x32
     dfe:	8b a9       	ldd	r24, Y+51	; 0x33
     e00:	9c a9       	ldd	r25, Y+52	; 0x34
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	3f ef       	ldi	r19, 0xFF	; 255
     e06:	4f e7       	ldi	r20, 0x7F	; 127
     e08:	57 e4       	ldi	r21, 0x47	; 71
     e0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e0e:	18 16       	cp	r1, r24
     e10:	4c f5       	brge	.+82     	; 0xe64 <main+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e12:	6d a9       	ldd	r22, Y+53	; 0x35
     e14:	7e a9       	ldd	r23, Y+54	; 0x36
     e16:	8f a9       	ldd	r24, Y+55	; 0x37
     e18:	98 ad       	ldd	r25, Y+56	; 0x38
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e2       	ldi	r20, 0x20	; 32
     e20:	51 e4       	ldi	r21, 0x41	; 65
     e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	bc 01       	movw	r22, r24
     e2c:	cd 01       	movw	r24, r26
     e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	98 ab       	std	Y+48, r25	; 0x30
     e38:	8f a7       	std	Y+47, r24	; 0x2f
     e3a:	0f c0       	rjmp	.+30     	; 0xe5a <main+0x1e2>
     e3c:	88 ec       	ldi	r24, 0xC8	; 200
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	9e a7       	std	Y+46, r25	; 0x2e
     e42:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e44:	8d a5       	ldd	r24, Y+45	; 0x2d
     e46:	9e a5       	ldd	r25, Y+46	; 0x2e
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <main+0x1d0>
     e4c:	9e a7       	std	Y+46, r25	; 0x2e
     e4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e50:	8f a5       	ldd	r24, Y+47	; 0x2f
     e52:	98 a9       	ldd	r25, Y+48	; 0x30
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	98 ab       	std	Y+48, r25	; 0x30
     e58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e5c:	98 a9       	ldd	r25, Y+48	; 0x30
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	69 f7       	brne	.-38     	; 0xe3c <main+0x1c4>
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <main+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e64:	69 a9       	ldd	r22, Y+49	; 0x31
     e66:	7a a9       	ldd	r23, Y+50	; 0x32
     e68:	8b a9       	ldd	r24, Y+51	; 0x33
     e6a:	9c a9       	ldd	r25, Y+52	; 0x34
     e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	98 ab       	std	Y+48, r25	; 0x30
     e76:	8f a7       	std	Y+47, r24	; 0x2f
     e78:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7a:	98 a9       	ldd	r25, Y+48	; 0x30
     e7c:	9c a7       	std	Y+44, r25	; 0x2c
     e7e:	8b a7       	std	Y+43, r24	; 0x2b
     e80:	8b a5       	ldd	r24, Y+43	; 0x2b
     e82:	9c a5       	ldd	r25, Y+44	; 0x2c
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <main+0x20c>
     e88:	9c a7       	std	Y+44, r25	; 0x2c
     e8a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				not_matched = 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	8b af       	std	Y+59, r24	; 0x3b

	/*Enable I-bit*/
	SREG |= (1<<7);
	while(1)
	{
		while(not_matched == 1) /* the while loop will not be broken until the two passwords match each other*/
     e90:	8b ad       	ldd	r24, Y+59	; 0x3b
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	09 f4       	brne	.+2      	; 0xe98 <main+0x220>
     e96:	12 cf       	rjmp	.-476    	; 0xcbc <main+0x44>
				not_matched = 1;
			}
		}

		/* if the two passwords match each other, the user will proceed to the second option*/
		if(not_matched == 0)
     e98:	8b ad       	ldd	r24, Y+59	; 0x3b
     e9a:	88 23       	and	r24, r24
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <main+0x218>
		{
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
			LCD_displayString("+: Open door");
     ea4:	88 ec       	ldi	r24, 0xC8	; 200
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
			LCD_moveCursor(1,0);
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	0e 94 41 1a 	call	0x3482	; 0x3482 <LCD_moveCursor>
			LCD_displayString("-: Change pass");
     eb4:	85 ed       	ldi	r24, 0xD5	; 213
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
			options = KEYPAD_getPressedKey();
     ebc:	0e 94 81 10 	call	0x2102	; 0x2102 <KEYPAD_getPressedKey>
     ec0:	89 af       	std	Y+57, r24	; 0x39
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	aa ef       	ldi	r26, 0xFA	; 250
     ec8:	b3 e4       	ldi	r27, 0x43	; 67
     eca:	8f a3       	std	Y+39, r24	; 0x27
     ecc:	98 a7       	std	Y+40, r25	; 0x28
     ece:	a9 a7       	std	Y+41, r26	; 0x29
     ed0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed2:	6f a1       	ldd	r22, Y+39	; 0x27
     ed4:	78 a5       	ldd	r23, Y+40	; 0x28
     ed6:	89 a5       	ldd	r24, Y+41	; 0x29
     ed8:	9a a5       	ldd	r25, Y+42	; 0x2a
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	4a ef       	ldi	r20, 0xFA	; 250
     ee0:	54 e4       	ldi	r21, 0x44	; 68
     ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	8b a3       	std	Y+35, r24	; 0x23
     eec:	9c a3       	std	Y+36, r25	; 0x24
     eee:	ad a3       	std	Y+37, r26	; 0x25
     ef0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ef2:	6b a1       	ldd	r22, Y+35	; 0x23
     ef4:	7c a1       	ldd	r23, Y+36	; 0x24
     ef6:	8d a1       	ldd	r24, Y+37	; 0x25
     ef8:	9e a1       	ldd	r25, Y+38	; 0x26
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e8       	ldi	r20, 0x80	; 128
     f00:	5f e3       	ldi	r21, 0x3F	; 63
     f02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f06:	88 23       	and	r24, r24
     f08:	2c f4       	brge	.+10     	; 0xf14 <main+0x29c>
		__ticks = 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9a a3       	std	Y+34, r25	; 0x22
     f10:	89 a3       	std	Y+33, r24	; 0x21
     f12:	3f c0       	rjmp	.+126    	; 0xf92 <main+0x31a>
	else if (__tmp > 65535)
     f14:	6b a1       	ldd	r22, Y+35	; 0x23
     f16:	7c a1       	ldd	r23, Y+36	; 0x24
     f18:	8d a1       	ldd	r24, Y+37	; 0x25
     f1a:	9e a1       	ldd	r25, Y+38	; 0x26
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	3f ef       	ldi	r19, 0xFF	; 255
     f20:	4f e7       	ldi	r20, 0x7F	; 127
     f22:	57 e4       	ldi	r21, 0x47	; 71
     f24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f28:	18 16       	cp	r1, r24
     f2a:	4c f5       	brge	.+82     	; 0xf7e <main+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2c:	6f a1       	ldd	r22, Y+39	; 0x27
     f2e:	78 a5       	ldd	r23, Y+40	; 0x28
     f30:	89 a5       	ldd	r24, Y+41	; 0x29
     f32:	9a a5       	ldd	r25, Y+42	; 0x2a
     f34:	20 e0       	ldi	r18, 0x00	; 0
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	40 e2       	ldi	r20, 0x20	; 32
     f3a:	51 e4       	ldi	r21, 0x41	; 65
     f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	9a a3       	std	Y+34, r25	; 0x22
     f52:	89 a3       	std	Y+33, r24	; 0x21
     f54:	0f c0       	rjmp	.+30     	; 0xf74 <main+0x2fc>
     f56:	88 ec       	ldi	r24, 0xC8	; 200
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	98 a3       	std	Y+32, r25	; 0x20
     f5c:	8f 8f       	std	Y+31, r24	; 0x1f
     f5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f60:	98 a1       	ldd	r25, Y+32	; 0x20
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	f1 f7       	brne	.-4      	; 0xf62 <main+0x2ea>
     f66:	98 a3       	std	Y+32, r25	; 0x20
     f68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6a:	89 a1       	ldd	r24, Y+33	; 0x21
     f6c:	9a a1       	ldd	r25, Y+34	; 0x22
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	9a a3       	std	Y+34, r25	; 0x22
     f72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f74:	89 a1       	ldd	r24, Y+33	; 0x21
     f76:	9a a1       	ldd	r25, Y+34	; 0x22
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	69 f7       	brne	.-38     	; 0xf56 <main+0x2de>
     f7c:	14 c0       	rjmp	.+40     	; 0xfa6 <main+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7e:	6b a1       	ldd	r22, Y+35	; 0x23
     f80:	7c a1       	ldd	r23, Y+36	; 0x24
     f82:	8d a1       	ldd	r24, Y+37	; 0x25
     f84:	9e a1       	ldd	r25, Y+38	; 0x26
     f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	9a a3       	std	Y+34, r25	; 0x22
     f90:	89 a3       	std	Y+33, r24	; 0x21
     f92:	89 a1       	ldd	r24, Y+33	; 0x21
     f94:	9a a1       	ldd	r25, Y+34	; 0x22
     f96:	9e 8f       	std	Y+30, r25	; 0x1e
     f98:	8d 8f       	std	Y+29, r24	; 0x1d
     f9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <main+0x326>
     fa2:	9e 8f       	std	Y+30, r25	; 0x1e
     fa4:	8d 8f       	std	Y+29, r24	; 0x1d
			/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
			_delay_ms(500);

			/* if the user enters + he will be asked to enter the password the unlock the door*/
			if(options == '+')
     fa6:	89 ad       	ldd	r24, Y+57	; 0x39
     fa8:	8b 32       	cpi	r24, 0x2B	; 43
     faa:	09 f0       	breq	.+2      	; 0xfae <main+0x336>
     fac:	e2 c0       	rjmp	.+452    	; 0x1172 <main+0x4fa>
			{
				not_matched = 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	8b af       	std	Y+59, r24	; 0x3b
     fb2:	bf c0       	rjmp	.+382    	; 0x1132 <main+0x4ba>

				/* the while loop will not be broken until the user enters password wrong for
				 *  3 times and it does not match the one saved in EEPROM*/
				while((times != 3) && (not_matched == 1))
				{
					times++;
     fb4:	8a ad       	ldd	r24, Y+58	; 0x3a
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	8a af       	std	Y+58, r24	; 0x3a
					not_matched = 0;
     fba:	1b ae       	std	Y+59, r1	; 0x3b
					LCD_sendCommand(LCD_CLEAR_COMMAND);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
					LCD_displayString("Enter pass:");
     fc2:	84 ee       	ldi	r24, 0xE4	; 228
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
					LCD_moveCursor(1,0);
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	0e 94 41 1a 	call	0x3482	; 0x3482 <LCD_moveCursor>

					HMI_enterPass(my_pass);
     fd2:	ce 01       	movw	r24, r28
     fd4:	86 5b       	subi	r24, 0xB6	; 182
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	0e 94 c9 1a 	call	0x3592	; 0x3592 <HMI_enterPass>

					/* the entered password will be sent to the CONTROL_ECU to be checked with
					 * the one saved in the EEPROM*/
					UART_sendByte(HMI_ECU_READY);
     fdc:	80 e1       	ldi	r24, 0x10	; 16
     fde:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
					while(UART_recieveByte() != CONTROL_ECU_READY){}
     fe2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
     fe6:	80 32       	cpi	r24, 0x20	; 32
     fe8:	e1 f7       	brne	.-8      	; 0xfe2 <main+0x36a>
					UART_sendByte(CHECK_SAVED_PASS);
     fea:	83 e3       	ldi	r24, 0x33	; 51
     fec:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
					for(i=0; i<PASS_SIZE; i++)
     ff0:	1d ae       	std	Y+61, r1	; 0x3d
     ff2:	13 c0       	rjmp	.+38     	; 0x101a <main+0x3a2>
					{
						while(UART_recieveByte() != CONTROL_ECU_READY){}
     ff4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
     ff8:	80 32       	cpi	r24, 0x20	; 32
     ffa:	e1 f7       	brne	.-8      	; 0xff4 <main+0x37c>
						UART_sendByte(my_pass[i]);
     ffc:	8d ad       	ldd	r24, Y+61	; 0x3d
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	ce 01       	movw	r24, r28
    1004:	86 5b       	subi	r24, 0xB6	; 182
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	fc 01       	movw	r30, r24
    100a:	e2 0f       	add	r30, r18
    100c:	f3 1f       	adc	r31, r19
    100e:	80 81       	ld	r24, Z
    1010:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
					/* the entered password will be sent to the CONTROL_ECU to be checked with
					 * the one saved in the EEPROM*/
					UART_sendByte(HMI_ECU_READY);
					while(UART_recieveByte() != CONTROL_ECU_READY){}
					UART_sendByte(CHECK_SAVED_PASS);
					for(i=0; i<PASS_SIZE; i++)
    1014:	8d ad       	ldd	r24, Y+61	; 0x3d
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	8d af       	std	Y+61, r24	; 0x3d
    101a:	8d ad       	ldd	r24, Y+61	; 0x3d
    101c:	86 30       	cpi	r24, 0x06	; 6
    101e:	50 f3       	brcs	.-44     	; 0xff4 <main+0x37c>
					{
						while(UART_recieveByte() != CONTROL_ECU_READY){}
						UART_sendByte(my_pass[i]);
					}
					while(UART_recieveByte() != CONTROL_ECU_READY){}
    1020:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
    1024:	80 32       	cpi	r24, 0x20	; 32
    1026:	e1 f7       	brne	.-8      	; 0x1020 <main+0x3a8>
					UART_sendByte(HMI_ECU_READY);
    1028:	80 e1       	ldi	r24, 0x10	; 16
    102a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
					receive = UART_recieveByte();
    102e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
    1032:	8c af       	std	Y+60, r24	; 0x3c

					/* if the entered password is wrong, the user will try again and the
					 * number of times will be incremented*/
					if(receive == NOT_CORRECT_PASS)
    1034:	8c ad       	ldd	r24, Y+60	; 0x3c
    1036:	86 36       	cpi	r24, 0x66	; 102
    1038:	09 f0       	breq	.+2      	; 0x103c <main+0x3c4>
    103a:	7b c0       	rjmp	.+246    	; 0x1132 <main+0x4ba>
					{
						LCD_sendCommand(LCD_CLEAR_COMMAND);
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
						LCD_displayString("Wrong password!");
    1042:	80 ef       	ldi	r24, 0xF0	; 240
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	aa e7       	ldi	r26, 0x7A	; 122
    1050:	b4 e4       	ldi	r27, 0x44	; 68
    1052:	89 8f       	std	Y+25, r24	; 0x19
    1054:	9a 8f       	std	Y+26, r25	; 0x1a
    1056:	ab 8f       	std	Y+27, r26	; 0x1b
    1058:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105a:	69 8d       	ldd	r22, Y+25	; 0x19
    105c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    105e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	4a ef       	ldi	r20, 0xFA	; 250
    1068:	54 e4       	ldi	r21, 0x44	; 68
    106a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	8d 8b       	std	Y+21, r24	; 0x15
    1074:	9e 8b       	std	Y+22, r25	; 0x16
    1076:	af 8b       	std	Y+23, r26	; 0x17
    1078:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    107a:	6d 89       	ldd	r22, Y+21	; 0x15
    107c:	7e 89       	ldd	r23, Y+22	; 0x16
    107e:	8f 89       	ldd	r24, Y+23	; 0x17
    1080:	98 8d       	ldd	r25, Y+24	; 0x18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e8       	ldi	r20, 0x80	; 128
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    108e:	88 23       	and	r24, r24
    1090:	2c f4       	brge	.+10     	; 0x109c <main+0x424>
		__ticks = 1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	9c 8b       	std	Y+20, r25	; 0x14
    1098:	8b 8b       	std	Y+19, r24	; 0x13
    109a:	3f c0       	rjmp	.+126    	; 0x111a <main+0x4a2>
	else if (__tmp > 65535)
    109c:	6d 89       	ldd	r22, Y+21	; 0x15
    109e:	7e 89       	ldd	r23, Y+22	; 0x16
    10a0:	8f 89       	ldd	r24, Y+23	; 0x17
    10a2:	98 8d       	ldd	r25, Y+24	; 0x18
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	3f ef       	ldi	r19, 0xFF	; 255
    10a8:	4f e7       	ldi	r20, 0x7F	; 127
    10aa:	57 e4       	ldi	r21, 0x47	; 71
    10ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b0:	18 16       	cp	r1, r24
    10b2:	4c f5       	brge	.+82     	; 0x1106 <main+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b4:	69 8d       	ldd	r22, Y+25	; 0x19
    10b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e2       	ldi	r20, 0x20	; 32
    10c2:	51 e4       	ldi	r21, 0x41	; 65
    10c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	9c 8b       	std	Y+20, r25	; 0x14
    10da:	8b 8b       	std	Y+19, r24	; 0x13
    10dc:	0f c0       	rjmp	.+30     	; 0x10fc <main+0x484>
    10de:	88 ec       	ldi	r24, 0xC8	; 200
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9a 8b       	std	Y+18, r25	; 0x12
    10e4:	89 8b       	std	Y+17, r24	; 0x11
    10e6:	89 89       	ldd	r24, Y+17	; 0x11
    10e8:	9a 89       	ldd	r25, Y+18	; 0x12
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <main+0x472>
    10ee:	9a 8b       	std	Y+18, r25	; 0x12
    10f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f2:	8b 89       	ldd	r24, Y+19	; 0x13
    10f4:	9c 89       	ldd	r25, Y+20	; 0x14
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	9c 8b       	std	Y+20, r25	; 0x14
    10fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fc:	8b 89       	ldd	r24, Y+19	; 0x13
    10fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	69 f7       	brne	.-38     	; 0x10de <main+0x466>
    1104:	14 c0       	rjmp	.+40     	; 0x112e <main+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1106:	6d 89       	ldd	r22, Y+21	; 0x15
    1108:	7e 89       	ldd	r23, Y+22	; 0x16
    110a:	8f 89       	ldd	r24, Y+23	; 0x17
    110c:	98 8d       	ldd	r25, Y+24	; 0x18
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9c 8b       	std	Y+20, r25	; 0x14
    1118:	8b 8b       	std	Y+19, r24	; 0x13
    111a:	8b 89       	ldd	r24, Y+19	; 0x13
    111c:	9c 89       	ldd	r25, Y+20	; 0x14
    111e:	98 8b       	std	Y+16, r25	; 0x10
    1120:	8f 87       	std	Y+15, r24	; 0x0f
    1122:	8f 85       	ldd	r24, Y+15	; 0x0f
    1124:	98 89       	ldd	r25, Y+16	; 0x10
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <main+0x4ae>
    112a:	98 8b       	std	Y+16, r25	; 0x10
    112c:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1000);
						not_matched = 1;
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	8b af       	std	Y+59, r24	; 0x3b
			{
				not_matched = 1;

				/* the while loop will not be broken until the user enters password wrong for
				 *  3 times and it does not match the one saved in EEPROM*/
				while((times != 3) && (not_matched == 1))
    1132:	8a ad       	ldd	r24, Y+58	; 0x3a
    1134:	83 30       	cpi	r24, 0x03	; 3
    1136:	21 f0       	breq	.+8      	; 0x1140 <main+0x4c8>
    1138:	8b ad       	ldd	r24, Y+59	; 0x3b
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	09 f4       	brne	.+2      	; 0x1140 <main+0x4c8>
    113e:	3a cf       	rjmp	.-396    	; 0xfb4 <main+0x33c>
						not_matched = 1;
					}
				}

				/* if the entered password is correct the door state will appear on the LCD*/
				if(not_matched == 0)
    1140:	8b ad       	ldd	r24, Y+59	; 0x3b
    1142:	88 23       	and	r24, r24
    1144:	31 f4       	brne	.+12     	; 0x1152 <main+0x4da>
				{
					times = 0;
    1146:	1a ae       	std	Y+58, r1	; 0x3a
					call_back = 1;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	80 93 36 01 	sts	0x0136, r24
					HMI_unlockDoor();
    114e:	0e 94 81 1b 	call	0x3702	; 0x3702 <HMI_unlockDoor>
				}

				/* if the user entered the password wrong for 3 times an error msg will appear on the LCD*/
				if((times == 3) && (not_matched == 1))
    1152:	8a ad       	ldd	r24, Y+58	; 0x3a
    1154:	83 30       	cpi	r24, 0x03	; 3
    1156:	09 f0       	breq	.+2      	; 0x115a <main+0x4e2>
    1158:	9b ce       	rjmp	.-714    	; 0xe90 <main+0x218>
    115a:	8b ad       	ldd	r24, Y+59	; 0x3b
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	09 f0       	breq	.+2      	; 0x1162 <main+0x4ea>
    1160:	97 ce       	rjmp	.-722    	; 0xe90 <main+0x218>
				{
					call_back = 2;
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	80 93 36 01 	sts	0x0136, r24
					HMI_alarm();
    1168:	0e 94 ba 1b 	call	0x3774	; 0x3774 <HMI_alarm>
					times = 0;
    116c:	1a ae       	std	Y+58, r1	; 0x3a
					not_matched = 0;
    116e:	1b ae       	std	Y+59, r1	; 0x3b
    1170:	8f ce       	rjmp	.-738    	; 0xe90 <main+0x218>
				}
			}

			/* if the user entered - he will be asked to enter the password the change it*/
			else if(options == '-')
    1172:	89 ad       	ldd	r24, Y+57	; 0x39
    1174:	8d 32       	cpi	r24, 0x2D	; 45
    1176:	09 f0       	breq	.+2      	; 0x117a <main+0x502>
    1178:	8b ce       	rjmp	.-746    	; 0xe90 <main+0x218>
			{
				not_matched = 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	8b af       	std	Y+59, r24	; 0x3b
    117e:	bf c0       	rjmp	.+382    	; 0x12fe <main+0x686>

				/* the while loop will not be broken until the user enters password wrong for
				 *  3 times and it does not match the one saved in EEPROM*/
				while((times != 3) && (not_matched == 1))
				{
					times++;
    1180:	8a ad       	ldd	r24, Y+58	; 0x3a
    1182:	8f 5f       	subi	r24, 0xFF	; 255
    1184:	8a af       	std	Y+58, r24	; 0x3a
					not_matched = 0;
    1186:	1b ae       	std	Y+59, r1	; 0x3b
					LCD_sendCommand(LCD_CLEAR_COMMAND);
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
					LCD_displayString("Enter pass:");
    118e:	84 ee       	ldi	r24, 0xE4	; 228
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
					LCD_moveCursor(1,0);
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	0e 94 41 1a 	call	0x3482	; 0x3482 <LCD_moveCursor>

					HMI_enterPass(my_pass);
    119e:	ce 01       	movw	r24, r28
    11a0:	86 5b       	subi	r24, 0xB6	; 182
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	0e 94 c9 1a 	call	0x3592	; 0x3592 <HMI_enterPass>

					/* the entered password will be sent to the CONTROL_ECU to be checked with
					 * the one saved in the EEPROM*/
					UART_sendByte(HMI_ECU_READY);
    11a8:	80 e1       	ldi	r24, 0x10	; 16
    11aa:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
					while(UART_recieveByte() != CONTROL_ECU_READY){}
    11ae:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
    11b2:	80 32       	cpi	r24, 0x20	; 32
    11b4:	e1 f7       	brne	.-8      	; 0x11ae <main+0x536>
					UART_sendByte(CHECK_SAVED_PASS);
    11b6:	83 e3       	ldi	r24, 0x33	; 51
    11b8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
					for(i=0; i<PASS_SIZE; i++)
    11bc:	1d ae       	std	Y+61, r1	; 0x3d
    11be:	13 c0       	rjmp	.+38     	; 0x11e6 <main+0x56e>
					{
						while(UART_recieveByte() != CONTROL_ECU_READY){}
    11c0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
    11c4:	80 32       	cpi	r24, 0x20	; 32
    11c6:	e1 f7       	brne	.-8      	; 0x11c0 <main+0x548>
						UART_sendByte(my_pass[i]);
    11c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	ce 01       	movw	r24, r28
    11d0:	86 5b       	subi	r24, 0xB6	; 182
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	fc 01       	movw	r30, r24
    11d6:	e2 0f       	add	r30, r18
    11d8:	f3 1f       	adc	r31, r19
    11da:	80 81       	ld	r24, Z
    11dc:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
					/* the entered password will be sent to the CONTROL_ECU to be checked with
					 * the one saved in the EEPROM*/
					UART_sendByte(HMI_ECU_READY);
					while(UART_recieveByte() != CONTROL_ECU_READY){}
					UART_sendByte(CHECK_SAVED_PASS);
					for(i=0; i<PASS_SIZE; i++)
    11e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	8d af       	std	Y+61, r24	; 0x3d
    11e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    11e8:	86 30       	cpi	r24, 0x06	; 6
    11ea:	50 f3       	brcs	.-44     	; 0x11c0 <main+0x548>
					{
						while(UART_recieveByte() != CONTROL_ECU_READY){}
						UART_sendByte(my_pass[i]);
					}
					while(UART_recieveByte() != CONTROL_ECU_READY){}
    11ec:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
    11f0:	80 32       	cpi	r24, 0x20	; 32
    11f2:	e1 f7       	brne	.-8      	; 0x11ec <main+0x574>
					UART_sendByte(HMI_ECU_READY);
    11f4:	80 e1       	ldi	r24, 0x10	; 16
    11f6:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
					receive = UART_recieveByte();
    11fa:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
    11fe:	8c af       	std	Y+60, r24	; 0x3c

					/* if the entered password is wrong, the user will try again and the
					 * number of times will be incremented*/
					if(receive == NOT_CORRECT_PASS)
    1200:	8c ad       	ldd	r24, Y+60	; 0x3c
    1202:	86 36       	cpi	r24, 0x66	; 102
    1204:	09 f0       	breq	.+2      	; 0x1208 <main+0x590>
    1206:	7b c0       	rjmp	.+246    	; 0x12fe <main+0x686>
					{
						LCD_sendCommand(LCD_CLEAR_COMMAND);
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
						LCD_displayString("Wrong password!");
    120e:	80 ef       	ldi	r24, 0xF0	; 240
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	aa e7       	ldi	r26, 0x7A	; 122
    121c:	b4 e4       	ldi	r27, 0x44	; 68
    121e:	8b 87       	std	Y+11, r24	; 0x0b
    1220:	9c 87       	std	Y+12, r25	; 0x0c
    1222:	ad 87       	std	Y+13, r26	; 0x0d
    1224:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1226:	6b 85       	ldd	r22, Y+11	; 0x0b
    1228:	7c 85       	ldd	r23, Y+12	; 0x0c
    122a:	8d 85       	ldd	r24, Y+13	; 0x0d
    122c:	9e 85       	ldd	r25, Y+14	; 0x0e
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	4a ef       	ldi	r20, 0xFA	; 250
    1234:	54 e4       	ldi	r21, 0x44	; 68
    1236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	8f 83       	std	Y+7, r24	; 0x07
    1240:	98 87       	std	Y+8, r25	; 0x08
    1242:	a9 87       	std	Y+9, r26	; 0x09
    1244:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1246:	6f 81       	ldd	r22, Y+7	; 0x07
    1248:	78 85       	ldd	r23, Y+8	; 0x08
    124a:	89 85       	ldd	r24, Y+9	; 0x09
    124c:	9a 85       	ldd	r25, Y+10	; 0x0a
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e8       	ldi	r20, 0x80	; 128
    1254:	5f e3       	ldi	r21, 0x3F	; 63
    1256:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    125a:	88 23       	and	r24, r24
    125c:	2c f4       	brge	.+10     	; 0x1268 <main+0x5f0>
		__ticks = 1;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	9e 83       	std	Y+6, r25	; 0x06
    1264:	8d 83       	std	Y+5, r24	; 0x05
    1266:	3f c0       	rjmp	.+126    	; 0x12e6 <main+0x66e>
	else if (__tmp > 65535)
    1268:	6f 81       	ldd	r22, Y+7	; 0x07
    126a:	78 85       	ldd	r23, Y+8	; 0x08
    126c:	89 85       	ldd	r24, Y+9	; 0x09
    126e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	3f ef       	ldi	r19, 0xFF	; 255
    1274:	4f e7       	ldi	r20, 0x7F	; 127
    1276:	57 e4       	ldi	r21, 0x47	; 71
    1278:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    127c:	18 16       	cp	r1, r24
    127e:	4c f5       	brge	.+82     	; 0x12d2 <main+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1280:	6b 85       	ldd	r22, Y+11	; 0x0b
    1282:	7c 85       	ldd	r23, Y+12	; 0x0c
    1284:	8d 85       	ldd	r24, Y+13	; 0x0d
    1286:	9e 85       	ldd	r25, Y+14	; 0x0e
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e2       	ldi	r20, 0x20	; 32
    128e:	51 e4       	ldi	r21, 0x41	; 65
    1290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8d 83       	std	Y+5, r24	; 0x05
    12a8:	0f c0       	rjmp	.+30     	; 0x12c8 <main+0x650>
    12aa:	88 ec       	ldi	r24, 0xC8	; 200
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9c 83       	std	Y+4, r25	; 0x04
    12b0:	8b 83       	std	Y+3, r24	; 0x03
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <main+0x63e>
    12ba:	9c 83       	std	Y+4, r25	; 0x04
    12bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	9e 81       	ldd	r25, Y+6	; 0x06
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ca:	9e 81       	ldd	r25, Y+6	; 0x06
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	69 f7       	brne	.-38     	; 0x12aa <main+0x632>
    12d0:	14 c0       	rjmp	.+40     	; 0x12fa <main+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d2:	6f 81       	ldd	r22, Y+7	; 0x07
    12d4:	78 85       	ldd	r23, Y+8	; 0x08
    12d6:	89 85       	ldd	r24, Y+9	; 0x09
    12d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	9e 83       	std	Y+6, r25	; 0x06
    12e4:	8d 83       	std	Y+5, r24	; 0x05
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	9a 83       	std	Y+2, r25	; 0x02
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	9a 81       	ldd	r25, Y+2	; 0x02
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <main+0x67a>
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1000);
						not_matched = 1;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	8b af       	std	Y+59, r24	; 0x3b
			{
				not_matched = 1;

				/* the while loop will not be broken until the user enters password wrong for
				 *  3 times and it does not match the one saved in EEPROM*/
				while((times != 3) && (not_matched == 1))
    12fe:	8a ad       	ldd	r24, Y+58	; 0x3a
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	21 f0       	breq	.+8      	; 0x130c <main+0x694>
    1304:	8b ad       	ldd	r24, Y+59	; 0x3b
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	09 f4       	brne	.+2      	; 0x130c <main+0x694>
    130a:	3a cf       	rjmp	.-396    	; 0x1180 <main+0x508>
					}
				}

				/* if the entered password is correct, the not_matched flag will be set to be
				 * able to change the password again*/
				if(not_matched == 0)
    130c:	8b ad       	ldd	r24, Y+59	; 0x3b
    130e:	88 23       	and	r24, r24
    1310:	19 f4       	brne	.+6      	; 0x1318 <main+0x6a0>
				{
					times = 0;
    1312:	1a ae       	std	Y+58, r1	; 0x3a
					not_matched = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	8b af       	std	Y+59, r24	; 0x3b
				}

				/* if the user entered the password wrong for 3 times an error msg will appear on the LCD*/
				if((times == 3) && (not_matched == 1))
    1318:	8a ad       	ldd	r24, Y+58	; 0x3a
    131a:	83 30       	cpi	r24, 0x03	; 3
    131c:	09 f0       	breq	.+2      	; 0x1320 <main+0x6a8>
    131e:	b8 cd       	rjmp	.-1168   	; 0xe90 <main+0x218>
    1320:	8b ad       	ldd	r24, Y+59	; 0x3b
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	09 f0       	breq	.+2      	; 0x1328 <main+0x6b0>
    1326:	b4 cd       	rjmp	.-1176   	; 0xe90 <main+0x218>
				{
					call_back = 2;
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	80 93 36 01 	sts	0x0136, r24
					HMI_alarm();
    132e:	0e 94 ba 1b 	call	0x3774	; 0x3774 <HMI_alarm>
					times = 0;
    1332:	1a ae       	std	Y+58, r1	; 0x3a
					not_matched = 0;
    1334:	1b ae       	std	Y+59, r1	; 0x3b
    1336:	ac cd       	rjmp	.-1192   	; 0xe90 <main+0x218>

00001338 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1338:	1f 92       	push	r1
    133a:	0f 92       	push	r0
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	0f 92       	push	r0
    1340:	11 24       	eor	r1, r1
    1342:	2f 93       	push	r18
    1344:	3f 93       	push	r19
    1346:	4f 93       	push	r20
    1348:	5f 93       	push	r21
    134a:	6f 93       	push	r22
    134c:	7f 93       	push	r23
    134e:	8f 93       	push	r24
    1350:	9f 93       	push	r25
    1352:	af 93       	push	r26
    1354:	bf 93       	push	r27
    1356:	ef 93       	push	r30
    1358:	ff 93       	push	r31
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    1362:	80 91 37 01 	lds	r24, 0x0137
    1366:	90 91 38 01 	lds	r25, 0x0138
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	29 f0       	breq	.+10     	; 0x1378 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    136e:	e0 91 37 01 	lds	r30, 0x0137
    1372:	f0 91 38 01 	lds	r31, 0x0138
    1376:	09 95       	icall
	}
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	ff 91       	pop	r31
    137e:	ef 91       	pop	r30
    1380:	bf 91       	pop	r27
    1382:	af 91       	pop	r26
    1384:	9f 91       	pop	r25
    1386:	8f 91       	pop	r24
    1388:	7f 91       	pop	r23
    138a:	6f 91       	pop	r22
    138c:	5f 91       	pop	r21
    138e:	4f 91       	pop	r20
    1390:	3f 91       	pop	r19
    1392:	2f 91       	pop	r18
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0f 90       	pop	r0
    139a:	1f 90       	pop	r1
    139c:	18 95       	reti

0000139e <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    139e:	1f 92       	push	r1
    13a0:	0f 92       	push	r0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	0f 92       	push	r0
    13a6:	11 24       	eor	r1, r1
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr0 != NULL_PTR)
    13c8:	80 91 37 01 	lds	r24, 0x0137
    13cc:	90 91 38 01 	lds	r25, 0x0138
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	29 f0       	breq	.+10     	; 0x13de <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    13d4:	e0 91 37 01 	lds	r30, 0x0137
    13d8:	f0 91 38 01 	lds	r31, 0x0138
    13dc:	09 95       	icall
	}
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	ff 91       	pop	r31
    13e4:	ef 91       	pop	r30
    13e6:	bf 91       	pop	r27
    13e8:	af 91       	pop	r26
    13ea:	9f 91       	pop	r25
    13ec:	8f 91       	pop	r24
    13ee:	7f 91       	pop	r23
    13f0:	6f 91       	pop	r22
    13f2:	5f 91       	pop	r21
    13f4:	4f 91       	pop	r20
    13f6:	3f 91       	pop	r19
    13f8:	2f 91       	pop	r18
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	0f 90       	pop	r0
    1400:	1f 90       	pop	r1
    1402:	18 95       	reti

00001404 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    1404:	1f 92       	push	r1
    1406:	0f 92       	push	r0
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	0f 92       	push	r0
    140c:	11 24       	eor	r1, r1
    140e:	2f 93       	push	r18
    1410:	3f 93       	push	r19
    1412:	4f 93       	push	r20
    1414:	5f 93       	push	r21
    1416:	6f 93       	push	r22
    1418:	7f 93       	push	r23
    141a:	8f 93       	push	r24
    141c:	9f 93       	push	r25
    141e:	af 93       	push	r26
    1420:	bf 93       	push	r27
    1422:	ef 93       	push	r30
    1424:	ff 93       	push	r31
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    142e:	80 91 39 01 	lds	r24, 0x0139
    1432:	90 91 3a 01 	lds	r25, 0x013A
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	29 f0       	breq	.+10     	; 0x1444 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    143a:	e0 91 39 01 	lds	r30, 0x0139
    143e:	f0 91 3a 01 	lds	r31, 0x013A
    1442:	09 95       	icall
	}
}
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	ff 91       	pop	r31
    144a:	ef 91       	pop	r30
    144c:	bf 91       	pop	r27
    144e:	af 91       	pop	r26
    1450:	9f 91       	pop	r25
    1452:	8f 91       	pop	r24
    1454:	7f 91       	pop	r23
    1456:	6f 91       	pop	r22
    1458:	5f 91       	pop	r21
    145a:	4f 91       	pop	r20
    145c:	3f 91       	pop	r19
    145e:	2f 91       	pop	r18
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
    1474:	2f 93       	push	r18
    1476:	3f 93       	push	r19
    1478:	4f 93       	push	r20
    147a:	5f 93       	push	r21
    147c:	6f 93       	push	r22
    147e:	7f 93       	push	r23
    1480:	8f 93       	push	r24
    1482:	9f 93       	push	r25
    1484:	af 93       	push	r26
    1486:	bf 93       	push	r27
    1488:	ef 93       	push	r30
    148a:	ff 93       	push	r31
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr1 != NULL_PTR)
    1494:	80 91 39 01 	lds	r24, 0x0139
    1498:	90 91 3a 01 	lds	r25, 0x013A
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	29 f0       	breq	.+10     	; 0x14aa <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    14a0:	e0 91 39 01 	lds	r30, 0x0139
    14a4:	f0 91 3a 01 	lds	r31, 0x013A
    14a8:	09 95       	icall
	}
}
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	ff 91       	pop	r31
    14b0:	ef 91       	pop	r30
    14b2:	bf 91       	pop	r27
    14b4:	af 91       	pop	r26
    14b6:	9f 91       	pop	r25
    14b8:	8f 91       	pop	r24
    14ba:	7f 91       	pop	r23
    14bc:	6f 91       	pop	r22
    14be:	5f 91       	pop	r21
    14c0:	4f 91       	pop	r20
    14c2:	3f 91       	pop	r19
    14c4:	2f 91       	pop	r18
    14c6:	0f 90       	pop	r0
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	0f 90       	pop	r0
    14cc:	1f 90       	pop	r1
    14ce:	18 95       	reti

000014d0 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    14d0:	1f 92       	push	r1
    14d2:	0f 92       	push	r0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	0f 92       	push	r0
    14d8:	11 24       	eor	r1, r1
    14da:	2f 93       	push	r18
    14dc:	3f 93       	push	r19
    14de:	4f 93       	push	r20
    14e0:	5f 93       	push	r21
    14e2:	6f 93       	push	r22
    14e4:	7f 93       	push	r23
    14e6:	8f 93       	push	r24
    14e8:	9f 93       	push	r25
    14ea:	af 93       	push	r26
    14ec:	bf 93       	push	r27
    14ee:	ef 93       	push	r30
    14f0:	ff 93       	push	r31
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    14fa:	80 91 3b 01 	lds	r24, 0x013B
    14fe:	90 91 3c 01 	lds	r25, 0x013C
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	29 f0       	breq	.+10     	; 0x1510 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1506:	e0 91 3b 01 	lds	r30, 0x013B
    150a:	f0 91 3c 01 	lds	r31, 0x013C
    150e:	09 95       	icall
	}
}
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	ff 91       	pop	r31
    1516:	ef 91       	pop	r30
    1518:	bf 91       	pop	r27
    151a:	af 91       	pop	r26
    151c:	9f 91       	pop	r25
    151e:	8f 91       	pop	r24
    1520:	7f 91       	pop	r23
    1522:	6f 91       	pop	r22
    1524:	5f 91       	pop	r21
    1526:	4f 91       	pop	r20
    1528:	3f 91       	pop	r19
    152a:	2f 91       	pop	r18
    152c:	0f 90       	pop	r0
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	0f 90       	pop	r0
    1532:	1f 90       	pop	r1
    1534:	18 95       	reti

00001536 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    1536:	1f 92       	push	r1
    1538:	0f 92       	push	r0
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	0f 92       	push	r0
    153e:	11 24       	eor	r1, r1
    1540:	2f 93       	push	r18
    1542:	3f 93       	push	r19
    1544:	4f 93       	push	r20
    1546:	5f 93       	push	r21
    1548:	6f 93       	push	r22
    154a:	7f 93       	push	r23
    154c:	8f 93       	push	r24
    154e:	9f 93       	push	r25
    1550:	af 93       	push	r26
    1552:	bf 93       	push	r27
    1554:	ef 93       	push	r30
    1556:	ff 93       	push	r31
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr2 != NULL_PTR)
    1560:	80 91 3b 01 	lds	r24, 0x013B
    1564:	90 91 3c 01 	lds	r25, 0x013C
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	29 f0       	breq	.+10     	; 0x1576 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    156c:	e0 91 3b 01 	lds	r30, 0x013B
    1570:	f0 91 3c 01 	lds	r31, 0x013C
    1574:	09 95       	icall
	}
}
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	ff 91       	pop	r31
    157c:	ef 91       	pop	r30
    157e:	bf 91       	pop	r27
    1580:	af 91       	pop	r26
    1582:	9f 91       	pop	r25
    1584:	8f 91       	pop	r24
    1586:	7f 91       	pop	r23
    1588:	6f 91       	pop	r22
    158a:	5f 91       	pop	r21
    158c:	4f 91       	pop	r20
    158e:	3f 91       	pop	r19
    1590:	2f 91       	pop	r18
    1592:	0f 90       	pop	r0
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	0f 90       	pop	r0
    1598:	1f 90       	pop	r1
    159a:	18 95       	reti

0000159c <Timers01_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timers01_Init(const TIMERS01_ConfigType * Config_Ptr)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <Timers01_Init+0x6>
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->timer_id == TIMER0)
    15aa:	e9 81       	ldd	r30, Y+1	; 0x01
    15ac:	fa 81       	ldd	r31, Y+2	; 0x02
    15ae:	80 81       	ld	r24, Z
    15b0:	88 23       	and	r24, r24
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <Timers01_Init+0x1a>
    15b4:	50 c0       	rjmp	.+160    	; 0x1656 <Timers01_Init+0xba>
	{
		if(Config_Ptr->timer_mode == TIMER_OVF)
    15b6:	e9 81       	ldd	r30, Y+1	; 0x01
    15b8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ba:	81 81       	ldd	r24, Z+1	; 0x01
    15bc:	88 23       	and	r24, r24
    15be:	f9 f4       	brne	.+62     	; 0x15fe <Timers01_Init+0x62>
		{
			TCNT0 = Config_Ptr->initial_value; //Set Timer initial value to a user defined value
    15c0:	a2 e5       	ldi	r26, 0x52	; 82
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e9 81       	ldd	r30, Y+1	; 0x01
    15c6:	fa 81       	ldd	r31, Y+2	; 0x02
    15c8:	83 81       	ldd	r24, Z+3	; 0x03
    15ca:	94 81       	ldd	r25, Z+4	; 0x04
    15cc:	8c 93       	st	X, r24
			TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    15ce:	a9 e5       	ldi	r26, 0x59	; 89
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e9 e5       	ldi	r30, 0x59	; 89
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	81 60       	ori	r24, 0x01	; 1
    15da:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 * 4. clock = User defined
			 */
			TCCR0 = (1<<FOC0);
    15dc:	e3 e5       	ldi	r30, 0x53	; 83
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 e8       	ldi	r24, 0x80	; 128
    15e2:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
    15e4:	a3 e5       	ldi	r26, 0x53	; 83
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e3 e5       	ldi	r30, 0x53	; 83
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	98 2f       	mov	r25, r24
    15f0:	98 7f       	andi	r25, 0xF8	; 248
    15f2:	e9 81       	ldd	r30, Y+1	; 0x01
    15f4:	fa 81       	ldd	r31, Y+2	; 0x02
    15f6:	82 81       	ldd	r24, Z+2	; 0x02
    15f8:	89 2b       	or	r24, r25
    15fa:	8c 93       	st	X, r24
    15fc:	8a c0       	rjmp	.+276    	; 0x1712 <Timers01_Init+0x176>
		}
		else if(Config_Ptr->timer_mode == TIMER_CTC)
    15fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1600:	fa 81       	ldd	r31, Y+2	; 0x02
    1602:	81 81       	ldd	r24, Z+1	; 0x01
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	09 f0       	breq	.+2      	; 0x160a <Timers01_Init+0x6e>
    1608:	84 c0       	rjmp	.+264    	; 0x1712 <Timers01_Init+0x176>
		{
			TCNT0 = Config_Ptr->initial_value; //Set Timer initial value to a user defined value
    160a:	a2 e5       	ldi	r26, 0x52	; 82
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e9 81       	ldd	r30, Y+1	; 0x01
    1610:	fa 81       	ldd	r31, Y+2	; 0x02
    1612:	83 81       	ldd	r24, Z+3	; 0x03
    1614:	94 81       	ldd	r25, Z+4	; 0x04
    1616:	8c 93       	st	X, r24
			OCR0  = Config_Ptr->compare_value; // Set Compare Value
    1618:	ac e5       	ldi	r26, 0x5C	; 92
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e9 81       	ldd	r30, Y+1	; 0x01
    161e:	fa 81       	ldd	r31, Y+2	; 0x02
    1620:	85 81       	ldd	r24, Z+5	; 0x05
    1622:	96 81       	ldd	r25, Z+6	; 0x06
    1624:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    1626:	a9 e5       	ldi	r26, 0x59	; 89
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e9 e5       	ldi	r30, 0x59	; 89
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	82 60       	ori	r24, 0x02	; 2
    1632:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. No need for OC0 in this example so COM00=0 & COM01=0
			 * 4. clock = User defined
			 */
			TCCR0 = (1<<FOC0) | (1<<WGM01);
    1634:	e3 e5       	ldi	r30, 0x53	; 83
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	88 e8       	ldi	r24, 0x88	; 136
    163a:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler);
    163c:	a3 e5       	ldi	r26, 0x53	; 83
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e3 e5       	ldi	r30, 0x53	; 83
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	98 2f       	mov	r25, r24
    1648:	98 7f       	andi	r25, 0xF8	; 248
    164a:	e9 81       	ldd	r30, Y+1	; 0x01
    164c:	fa 81       	ldd	r31, Y+2	; 0x02
    164e:	82 81       	ldd	r24, Z+2	; 0x02
    1650:	89 2b       	or	r24, r25
    1652:	8c 93       	st	X, r24
    1654:	5e c0       	rjmp	.+188    	; 0x1712 <Timers01_Init+0x176>
		}
	}

	else if(Config_Ptr->timer_id == TIMER1)
    1656:	e9 81       	ldd	r30, Y+1	; 0x01
    1658:	fa 81       	ldd	r31, Y+2	; 0x02
    165a:	80 81       	ld	r24, Z
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	09 f0       	breq	.+2      	; 0x1662 <Timers01_Init+0xc6>
    1660:	58 c0       	rjmp	.+176    	; 0x1712 <Timers01_Init+0x176>
	{
		if(Config_Ptr->timer_mode == TIMER_OVF)
    1662:	e9 81       	ldd	r30, Y+1	; 0x01
    1664:	fa 81       	ldd	r31, Y+2	; 0x02
    1666:	81 81       	ldd	r24, Z+1	; 0x01
    1668:	88 23       	and	r24, r24
    166a:	09 f5       	brne	.+66     	; 0x16ae <Timers01_Init+0x112>
		{
			TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial count to a user defined value */
    166c:	ac e4       	ldi	r26, 0x4C	; 76
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e9 81       	ldd	r30, Y+1	; 0x01
    1672:	fa 81       	ldd	r31, Y+2	; 0x02
    1674:	83 81       	ldd	r24, Z+3	; 0x03
    1676:	94 81       	ldd	r25, Z+4	; 0x04
    1678:	11 96       	adiw	r26, 0x01	; 1
    167a:	9c 93       	st	X, r25
    167c:	8e 93       	st	-X, r24

			TIMSK |= (1<<TOIE1); /* Enable Timer1 Overflow mode Interrupt */
    167e:	a9 e5       	ldi	r26, 0x59	; 89
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e9 e5       	ldi	r30, 0x59	; 89
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	84 60       	ori	r24, 0x04	; 4
    168a:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=0
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 0)
			 */
			TCCR1A = (1<<FOC1A);
    168c:	ef e4       	ldi	r30, 0x4F	; 79
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	88 e0       	ldi	r24, 0x08	; 8
    1692:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. Overflow Mode WGM12=0 WGM13=0 (Mode Number 0)
			 * 2. Prescaler = User defined
			 */
			TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    1694:	ae e4       	ldi	r26, 0x4E	; 78
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ee e4       	ldi	r30, 0x4E	; 78
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	98 2f       	mov	r25, r24
    16a0:	98 7f       	andi	r25, 0xF8	; 248
    16a2:	e9 81       	ldd	r30, Y+1	; 0x01
    16a4:	fa 81       	ldd	r31, Y+2	; 0x02
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	89 2b       	or	r24, r25
    16aa:	8c 93       	st	X, r24
    16ac:	32 c0       	rjmp	.+100    	; 0x1712 <Timers01_Init+0x176>
		}
		else if(Config_Ptr->timer_mode == TIMER_CTC)
    16ae:	e9 81       	ldd	r30, Y+1	; 0x01
    16b0:	fa 81       	ldd	r31, Y+2	; 0x02
    16b2:	81 81       	ldd	r24, Z+1	; 0x01
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	69 f5       	brne	.+90     	; 0x1712 <Timers01_Init+0x176>
		{
			TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial count to a user defined value */
    16b8:	ac e4       	ldi	r26, 0x4C	; 76
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e9 81       	ldd	r30, Y+1	; 0x01
    16be:	fa 81       	ldd	r31, Y+2	; 0x02
    16c0:	83 81       	ldd	r24, Z+3	; 0x03
    16c2:	94 81       	ldd	r25, Z+4	; 0x04
    16c4:	11 96       	adiw	r26, 0x01	; 1
    16c6:	9c 93       	st	X, r25
    16c8:	8e 93       	st	-X, r24

			OCR1A = Config_Ptr->compare_value;    /* Set the Compare value to a user defined value */
    16ca:	aa e4       	ldi	r26, 0x4A	; 74
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e9 81       	ldd	r30, Y+1	; 0x01
    16d0:	fa 81       	ldd	r31, Y+2	; 0x02
    16d2:	85 81       	ldd	r24, Z+5	; 0x05
    16d4:	96 81       	ldd	r25, Z+6	; 0x06
    16d6:	11 96       	adiw	r26, 0x01	; 1
    16d8:	9c 93       	st	X, r25
    16da:	8e 93       	st	-X, r24

			TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    16dc:	a9 e5       	ldi	r26, 0x59	; 89
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e9 e5       	ldi	r30, 0x59	; 89
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	80 61       	ori	r24, 0x10	; 16
    16e8:	8c 93       	st	X, r24
			/* Configure timer control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=0
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1<<FOC1A);
    16ea:	ef e4       	ldi	r30, 0x4F	; 79
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	88 e0       	ldi	r24, 0x08	; 8
    16f0:	80 83       	st	Z, r24

			/* Configure timer control register TCCR1B
			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 * 2. Prescaler = User defined
			 */
			TCCR1B = (1<<WGM12);
    16f2:	ee e4       	ldi	r30, 0x4E	; 78
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	88 e0       	ldi	r24, 0x08	; 8
    16f8:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    16fa:	ae e4       	ldi	r26, 0x4E	; 78
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ee e4       	ldi	r30, 0x4E	; 78
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	98 2f       	mov	r25, r24
    1706:	98 7f       	andi	r25, 0xF8	; 248
    1708:	e9 81       	ldd	r30, Y+1	; 0x01
    170a:	fa 81       	ldd	r31, Y+2	; 0x02
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	89 2b       	or	r24, r25
    1710:	8c 93       	st	X, r24
		}
	}
}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <Timer2_Init>:

void Timer2_Init(const TIMER2_ConfigType * Config_Ptr)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <Timer2_Init+0x6>
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	9a 83       	std	Y+2, r25	; 0x02
    1728:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->timer_mode == TIMER_OVF)
    172a:	e9 81       	ldd	r30, Y+1	; 0x01
    172c:	fa 81       	ldd	r31, Y+2	; 0x02
    172e:	80 81       	ld	r24, Z
    1730:	88 23       	and	r24, r24
    1732:	f1 f4       	brne	.+60     	; 0x1770 <Timer2_Init+0x54>
	{
		TCNT2 = Config_Ptr->initial_value; //Set Timer initial value to a user defined value
    1734:	a4 e4       	ldi	r26, 0x44	; 68
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e9 81       	ldd	r30, Y+1	; 0x01
    173a:	fa 81       	ldd	r31, Y+2	; 0x02
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE2); // Enable Timer2 Overflow Interrupt
    1740:	a9 e5       	ldi	r26, 0x59	; 89
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e9 e5       	ldi	r30, 0x59	; 89
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	80 64       	ori	r24, 0x40	; 64
    174c:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC2=1
		 * 2. Normal Mode WGM21=0 & WGM20=0
		 * 3. Normal Mode COM21=0 & COM20=0
		 * 4. clock = User defined
		 */
		TCCR2 = (1<<FOC2);
    174e:	e5 e4       	ldi	r30, 0x45	; 69
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 e8       	ldi	r24, 0x80	; 128
    1754:	80 83       	st	Z, r24
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->prescaler);
    1756:	a5 e4       	ldi	r26, 0x45	; 69
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e5 e4       	ldi	r30, 0x45	; 69
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	98 2f       	mov	r25, r24
    1762:	98 7f       	andi	r25, 0xF8	; 248
    1764:	e9 81       	ldd	r30, Y+1	; 0x01
    1766:	fa 81       	ldd	r31, Y+2	; 0x02
    1768:	81 81       	ldd	r24, Z+1	; 0x01
    176a:	89 2b       	or	r24, r25
    176c:	8c 93       	st	X, r24
    176e:	28 c0       	rjmp	.+80     	; 0x17c0 <Timer2_Init+0xa4>
	}
	else if(Config_Ptr->timer_mode == TIMER_CTC)
    1770:	e9 81       	ldd	r30, Y+1	; 0x01
    1772:	fa 81       	ldd	r31, Y+2	; 0x02
    1774:	80 81       	ld	r24, Z
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	19 f5       	brne	.+70     	; 0x17c0 <Timer2_Init+0xa4>
	{
		TCNT2 = Config_Ptr->initial_value; //Set Timer initial value to a user defined value
    177a:	a4 e4       	ldi	r26, 0x44	; 68
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e9 81       	ldd	r30, Y+1	; 0x01
    1780:	fa 81       	ldd	r31, Y+2	; 0x02
    1782:	82 81       	ldd	r24, Z+2	; 0x02
    1784:	8c 93       	st	X, r24
		OCR2  = Config_Ptr->compare_value; // Set Compare Value
    1786:	a3 e4       	ldi	r26, 0x43	; 67
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e9 81       	ldd	r30, Y+1	; 0x01
    178c:	fa 81       	ldd	r31, Y+2	; 0x02
    178e:	83 81       	ldd	r24, Z+3	; 0x03
    1790:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE2); // Enable Timer0 Compare Interrupt
    1792:	a9 e5       	ldi	r26, 0x59	; 89
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e9 e5       	ldi	r30, 0x59	; 89
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	80 68       	ori	r24, 0x80	; 128
    179e:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC2=1
		 * 2. CTC Mode WGM21=1 & WGM20=0
		 * 3. No need for OC2 in this example so COM20=0 & COM21=0
		 * 4. clock = User defined
		 */
		TCCR2 = (1<<FOC2) | (1<<WGM21);
    17a0:	e5 e4       	ldi	r30, 0x45	; 69
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	88 e8       	ldi	r24, 0x88	; 136
    17a6:	80 83       	st	Z, r24
		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->prescaler);
    17a8:	a5 e4       	ldi	r26, 0x45	; 69
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e4       	ldi	r30, 0x45	; 69
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	98 2f       	mov	r25, r24
    17b4:	98 7f       	andi	r25, 0xF8	; 248
    17b6:	e9 81       	ldd	r30, Y+1	; 0x01
    17b8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ba:	81 81       	ldd	r24, Z+1	; 0x01
    17bc:	89 2b       	or	r24, r25
    17be:	8c 93       	st	X, r24
	}
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <Timer0_SetCallBack>:

void Timer0_SetCallBack(void(*a_ptr)(void))
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <Timer0_SetCallBack+0x6>
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	9a 83       	std	Y+2, r25	; 0x02
    17d6:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr0 = a_ptr;
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	90 93 38 01 	sts	0x0138, r25
    17e0:	80 93 37 01 	sts	0x0137, r24
}
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <Timer1_SetCallBack>:

void Timer1_SetCallBack(void(*a_ptr)(void))
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <Timer1_SetCallBack+0x6>
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr1 = a_ptr;
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1800:	90 93 3a 01 	sts	0x013A, r25
    1804:	80 93 39 01 	sts	0x0139, r24
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <Timer2_SetCallBack>:

void Timer2_SetCallBack(void(*a_ptr)(void))
{
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	00 d0       	rcall	.+0      	; 0x1818 <Timer2_SetCallBack+0x6>
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	9a 83       	std	Y+2, r25	; 0x02
    181e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 = a_ptr;
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	9a 81       	ldd	r25, Y+2	; 0x02
    1824:	90 93 3c 01 	sts	0x013C, r25
    1828:	80 93 3b 01 	sts	0x013B, r24
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <Timers_DeInit>:

void Timers_DeInit(TIMERS_ID id)
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	0f 92       	push	r0
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	89 83       	std	Y+1, r24	; 0x01
	if(id == TIMER0)
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	88 23       	and	r24, r24
    1846:	89 f4       	brne	.+34     	; 0x186a <Timers_DeInit+0x34>
	{
		TCCR0 = 0;
    1848:	e3 e5       	ldi	r30, 0x53	; 83
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	10 82       	st	Z, r1
		TCNT0 = 0;
    184e:	e2 e5       	ldi	r30, 0x52	; 82
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	10 82       	st	Z, r1
		OCR0 = 0;
    1854:	ec e5       	ldi	r30, 0x5C	; 92
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE0) &~ (1<<OCIE0);
    185a:	a9 e5       	ldi	r26, 0x59	; 89
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e9 e5       	ldi	r30, 0x59	; 89
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8c 7f       	andi	r24, 0xFC	; 252
    1866:	8c 93       	st	X, r24
    1868:	2c c0       	rjmp	.+88     	; 0x18c2 <Timers_DeInit+0x8c>
	}
	else if(id == TIMER1)
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	b1 f4       	brne	.+44     	; 0x189c <Timers_DeInit+0x66>
	{
		TCCR1A = 0;
    1870:	ef e4       	ldi	r30, 0x4F	; 79
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	10 82       	st	Z, r1
		TCCR1B = 0;
    1876:	ee e4       	ldi	r30, 0x4E	; 78
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	10 82       	st	Z, r1
		TCNT1 = 0;
    187c:	ec e4       	ldi	r30, 0x4C	; 76
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	11 82       	std	Z+1, r1	; 0x01
    1882:	10 82       	st	Z, r1
		OCR1A = 0;
    1884:	ea e4       	ldi	r30, 0x4A	; 74
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	11 82       	std	Z+1, r1	; 0x01
    188a:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE1) &~ (1<<OCIE1A);
    188c:	a9 e5       	ldi	r26, 0x59	; 89
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	e9 e5       	ldi	r30, 0x59	; 89
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	8b 7e       	andi	r24, 0xEB	; 235
    1898:	8c 93       	st	X, r24
    189a:	13 c0       	rjmp	.+38     	; 0x18c2 <Timers_DeInit+0x8c>
	}
	else if(id == TIMER2)
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	81 f4       	brne	.+32     	; 0x18c2 <Timers_DeInit+0x8c>
	{
		TCCR2 = 0;
    18a2:	e5 e4       	ldi	r30, 0x45	; 69
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	10 82       	st	Z, r1
		TCNT2 = 0;
    18a8:	e4 e4       	ldi	r30, 0x44	; 68
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	10 82       	st	Z, r1
		OCR2 = 0;
    18ae:	e3 e4       	ldi	r30, 0x43	; 67
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE2) &~ (1<<OCIE2);
    18b4:	a9 e5       	ldi	r26, 0x59	; 89
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e9 e5       	ldi	r30, 0x59	; 89
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	8f 73       	andi	r24, 0x3F	; 63
    18c0:	8c 93       	st	X, r24
	}

}
    18c2:	0f 90       	pop	r0
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	00 d0       	rcall	.+0      	; 0x18d0 <UART_init+0x6>
    18d0:	00 d0       	rcall	.+0      	; 0x18d2 <UART_init+0x8>
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <UART_init+0xa>
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	6b 83       	std	Y+3, r22	; 0x03
    18da:	7c 83       	std	Y+4, r23	; 0x04
    18dc:	8d 83       	std	Y+5, r24	; 0x05
    18de:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
    18e0:	1a 82       	std	Y+2, r1	; 0x02
    18e2:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    18e4:	eb e2       	ldi	r30, 0x2B	; 43
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    18ec:	ea e2       	ldi	r30, 0x2A	; 42
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	88 e1       	ldi	r24, 0x18	; 24
    18f2:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    18f4:	e0 e4       	ldi	r30, 0x40	; 64
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	86 e8       	ldi	r24, 0x86	; 134
    18fa:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	ad 81       	ldd	r26, Y+5	; 0x05
    1902:	be 81       	ldd	r27, Y+6	; 0x06
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	aa 1f       	adc	r26, r26
    190a:	bb 1f       	adc	r27, r27
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	aa 1f       	adc	r26, r26
    1912:	bb 1f       	adc	r27, r27
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	aa 1f       	adc	r26, r26
    191a:	bb 1f       	adc	r27, r27
    191c:	9c 01       	movw	r18, r24
    191e:	ad 01       	movw	r20, r26
    1920:	80 e4       	ldi	r24, 0x40	; 64
    1922:	92 e4       	ldi	r25, 0x42	; 66
    1924:	af e0       	ldi	r26, 0x0F	; 15
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 df 1b 	call	0x37be	; 0x37be <__udivmodsi4>
    1930:	da 01       	movw	r26, r20
    1932:	c9 01       	movw	r24, r18
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    193a:	e0 e4       	ldi	r30, 0x40	; 64
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	9a 81       	ldd	r25, Y+2	; 0x02
    1942:	89 2f       	mov	r24, r25
    1944:	99 27       	eor	r25, r25
    1946:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1948:	e9 e2       	ldi	r30, 0x29	; 41
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	80 83       	st	Z, r24
}
    1950:	26 96       	adiw	r28, 0x06	; 6
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	0f 92       	push	r0
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    196e:	eb e2       	ldi	r30, 0x2B	; 43
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	88 2f       	mov	r24, r24
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	80 72       	andi	r24, 0x20	; 32
    197a:	90 70       	andi	r25, 0x00	; 0
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	b9 f3       	breq	.-18     	; 0x196e <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1980:	ec e2       	ldi	r30, 0x2C	; 44
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1998:	eb e2       	ldi	r30, 0x2B	; 43
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	88 23       	and	r24, r24
    19a0:	dc f7       	brge	.-10     	; 0x1998 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    19a2:	ec e2       	ldi	r30, 0x2C	; 44
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
}
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	00 d0       	rcall	.+0      	; 0x19b4 <UART_sendString+0x6>
    19b4:	0f 92       	push	r0
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	9b 83       	std	Y+3, r25	; 0x03
    19bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    19be:	19 82       	std	Y+1, r1	; 0x01
    19c0:	0e c0       	rjmp	.+28     	; 0x19de <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	9b 81       	ldd	r25, Y+3	; 0x03
    19cc:	fc 01       	movw	r30, r24
    19ce:	e2 0f       	add	r30, r18
    19d0:	f3 1f       	adc	r31, r19
    19d2:	80 81       	ld	r24, Z
    19d4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
		i++;
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	9b 81       	ldd	r25, Y+3	; 0x03
    19e8:	fc 01       	movw	r30, r24
    19ea:	e2 0f       	add	r30, r18
    19ec:	f3 1f       	adc	r31, r19
    19ee:	80 81       	ld	r24, Z
    19f0:	88 23       	and	r24, r24
    19f2:	39 f7       	brne	.-50     	; 0x19c2 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1a00:	0f 93       	push	r16
    1a02:	1f 93       	push	r17
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <UART_receiveString+0xa>
    1a0a:	0f 92       	push	r0
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	9b 83       	std	Y+3, r25	; 0x03
    1a12:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1a14:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a20:	8c 01       	movw	r16, r24
    1a22:	02 0f       	add	r16, r18
    1a24:	13 1f       	adc	r17, r19
    1a26:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	80 83       	st	Z, r24
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a40:	8c 01       	movw	r16, r24
    1a42:	02 0f       	add	r16, r18
    1a44:	13 1f       	adc	r17, r19
    1a46:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
    1a4a:	f8 01       	movw	r30, r16
    1a4c:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	9b 81       	ldd	r25, Y+3	; 0x03
    1a58:	fc 01       	movw	r30, r24
    1a5a:	e2 0f       	add	r30, r18
    1a5c:	f3 1f       	adc	r31, r19
    1a5e:	80 81       	ld	r24, Z
    1a60:	83 32       	cpi	r24, 0x23	; 35
    1a62:	31 f7       	brne	.-52     	; 0x1a30 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1a64:	89 81       	ldd	r24, Y+1	; 0x01
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6e:	fc 01       	movw	r30, r24
    1a70:	e2 0f       	add	r30, r18
    1a72:	f3 1f       	adc	r31, r19
    1a74:	10 82       	st	Z, r1
}
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	08 95       	ret

00001a86 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <GPIO_setupPinDirection+0x6>
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <GPIO_setupPinDirection+0x8>
    1a8e:	0f 92       	push	r0
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	6a 83       	std	Y+2, r22	; 0x02
    1a98:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	88 30       	cpi	r24, 0x08	; 8
    1a9e:	08 f0       	brcs	.+2      	; 0x1aa2 <GPIO_setupPinDirection+0x1c>
    1aa0:	d5 c0       	rjmp	.+426    	; 0x1c4c <GPIO_setupPinDirection+0x1c6>
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	84 30       	cpi	r24, 0x04	; 4
    1aa6:	08 f0       	brcs	.+2      	; 0x1aaa <GPIO_setupPinDirection+0x24>
    1aa8:	d1 c0       	rjmp	.+418    	; 0x1c4c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	3d 83       	std	Y+5, r19	; 0x05
    1ab2:	2c 83       	std	Y+4, r18	; 0x04
    1ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	91 05       	cpc	r25, r1
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <GPIO_setupPinDirection+0x3a>
    1abe:	43 c0       	rjmp	.+134    	; 0x1b46 <GPIO_setupPinDirection+0xc0>
    1ac0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac4:	22 30       	cpi	r18, 0x02	; 2
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	2c f4       	brge	.+10     	; 0x1ad4 <GPIO_setupPinDirection+0x4e>
    1aca:	8c 81       	ldd	r24, Y+4	; 0x04
    1acc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	71 f0       	breq	.+28     	; 0x1aee <GPIO_setupPinDirection+0x68>
    1ad2:	bc c0       	rjmp	.+376    	; 0x1c4c <GPIO_setupPinDirection+0x1c6>
    1ad4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad8:	22 30       	cpi	r18, 0x02	; 2
    1ada:	31 05       	cpc	r19, r1
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <GPIO_setupPinDirection+0x5a>
    1ade:	5f c0       	rjmp	.+190    	; 0x1b9e <GPIO_setupPinDirection+0x118>
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae4:	83 30       	cpi	r24, 0x03	; 3
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <GPIO_setupPinDirection+0x66>
    1aea:	85 c0       	rjmp	.+266    	; 0x1bf6 <GPIO_setupPinDirection+0x170>
    1aec:	af c0       	rjmp	.+350    	; 0x1c4c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	81 30       	cpi	r24, 0x01	; 1
    1af2:	a1 f4       	brne	.+40     	; 0x1b1c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1af4:	aa e3       	ldi	r26, 0x3A	; 58
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	ea e3       	ldi	r30, 0x3A	; 58
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	48 2f       	mov	r20, r24
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	28 2f       	mov	r18, r24
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	02 2e       	mov	r0, r18
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <GPIO_setupPinDirection+0x8c>
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	0a 94       	dec	r0
    1b14:	e2 f7       	brpl	.-8      	; 0x1b0e <GPIO_setupPinDirection+0x88>
    1b16:	84 2b       	or	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	98 c0       	rjmp	.+304    	; 0x1c4c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b1c:	aa e3       	ldi	r26, 0x3A	; 58
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	ea e3       	ldi	r30, 0x3A	; 58
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	48 2f       	mov	r20, r24
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	02 2e       	mov	r0, r18
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <GPIO_setupPinDirection+0xb4>
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	0a 94       	dec	r0
    1b3c:	e2 f7       	brpl	.-8      	; 0x1b36 <GPIO_setupPinDirection+0xb0>
    1b3e:	80 95       	com	r24
    1b40:	84 23       	and	r24, r20
    1b42:	8c 93       	st	X, r24
    1b44:	83 c0       	rjmp	.+262    	; 0x1c4c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	a1 f4       	brne	.+40     	; 0x1b74 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b4c:	a7 e3       	ldi	r26, 0x37	; 55
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e7 e3       	ldi	r30, 0x37	; 55
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	48 2f       	mov	r20, r24
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	02 2e       	mov	r0, r18
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <GPIO_setupPinDirection+0xe4>
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	0a 94       	dec	r0
    1b6c:	e2 f7       	brpl	.-8      	; 0x1b66 <GPIO_setupPinDirection+0xe0>
    1b6e:	84 2b       	or	r24, r20
    1b70:	8c 93       	st	X, r24
    1b72:	6c c0       	rjmp	.+216    	; 0x1c4c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1b74:	a7 e3       	ldi	r26, 0x37	; 55
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e7 e3       	ldi	r30, 0x37	; 55
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	48 2f       	mov	r20, r24
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	02 2e       	mov	r0, r18
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <GPIO_setupPinDirection+0x10c>
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	0a 94       	dec	r0
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <GPIO_setupPinDirection+0x108>
    1b96:	80 95       	com	r24
    1b98:	84 23       	and	r24, r20
    1b9a:	8c 93       	st	X, r24
    1b9c:	57 c0       	rjmp	.+174    	; 0x1c4c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	a1 f4       	brne	.+40     	; 0x1bcc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1ba4:	a4 e3       	ldi	r26, 0x34	; 52
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e4 e3       	ldi	r30, 0x34	; 52
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	48 2f       	mov	r20, r24
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	28 2f       	mov	r18, r24
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	02 2e       	mov	r0, r18
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <GPIO_setupPinDirection+0x13c>
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	0a 94       	dec	r0
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <GPIO_setupPinDirection+0x138>
    1bc6:	84 2b       	or	r24, r20
    1bc8:	8c 93       	st	X, r24
    1bca:	40 c0       	rjmp	.+128    	; 0x1c4c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1bcc:	a4 e3       	ldi	r26, 0x34	; 52
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e4 e3       	ldi	r30, 0x34	; 52
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 2e       	mov	r0, r18
    1be4:	02 c0       	rjmp	.+4      	; 0x1bea <GPIO_setupPinDirection+0x164>
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	0a 94       	dec	r0
    1bec:	e2 f7       	brpl	.-8      	; 0x1be6 <GPIO_setupPinDirection+0x160>
    1bee:	80 95       	com	r24
    1bf0:	84 23       	and	r24, r20
    1bf2:	8c 93       	st	X, r24
    1bf4:	2b c0       	rjmp	.+86     	; 0x1c4c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	a1 f4       	brne	.+40     	; 0x1c24 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1bfc:	a1 e3       	ldi	r26, 0x31	; 49
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	e1 e3       	ldi	r30, 0x31	; 49
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	80 81       	ld	r24, Z
    1c06:	48 2f       	mov	r20, r24
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	28 2f       	mov	r18, r24
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	02 2e       	mov	r0, r18
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <GPIO_setupPinDirection+0x194>
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	0a 94       	dec	r0
    1c1c:	e2 f7       	brpl	.-8      	; 0x1c16 <GPIO_setupPinDirection+0x190>
    1c1e:	84 2b       	or	r24, r20
    1c20:	8c 93       	st	X, r24
    1c22:	14 c0       	rjmp	.+40     	; 0x1c4c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c24:	a1 e3       	ldi	r26, 0x31	; 49
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e1 e3       	ldi	r30, 0x31	; 49
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	48 2f       	mov	r20, r24
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 2e       	mov	r0, r18
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <GPIO_setupPinDirection+0x1bc>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <GPIO_setupPinDirection+0x1b8>
    1c46:	80 95       	com	r24
    1c48:	84 23       	and	r24, r20
    1c4a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <GPIO_writePin+0x6>
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <GPIO_writePin+0x8>
    1c64:	0f 92       	push	r0
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	89 83       	std	Y+1, r24	; 0x01
    1c6c:	6a 83       	std	Y+2, r22	; 0x02
    1c6e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	88 30       	cpi	r24, 0x08	; 8
    1c74:	08 f0       	brcs	.+2      	; 0x1c78 <GPIO_writePin+0x1c>
    1c76:	d5 c0       	rjmp	.+426    	; 0x1e22 <GPIO_writePin+0x1c6>
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	84 30       	cpi	r24, 0x04	; 4
    1c7c:	08 f0       	brcs	.+2      	; 0x1c80 <GPIO_writePin+0x24>
    1c7e:	d1 c0       	rjmp	.+418    	; 0x1e22 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	3d 83       	std	Y+5, r19	; 0x05
    1c88:	2c 83       	std	Y+4, r18	; 0x04
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	91 05       	cpc	r25, r1
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <GPIO_writePin+0x3a>
    1c94:	43 c0       	rjmp	.+134    	; 0x1d1c <GPIO_writePin+0xc0>
    1c96:	2c 81       	ldd	r18, Y+4	; 0x04
    1c98:	3d 81       	ldd	r19, Y+5	; 0x05
    1c9a:	22 30       	cpi	r18, 0x02	; 2
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	2c f4       	brge	.+10     	; 0x1caa <GPIO_writePin+0x4e>
    1ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	71 f0       	breq	.+28     	; 0x1cc4 <GPIO_writePin+0x68>
    1ca8:	bc c0       	rjmp	.+376    	; 0x1e22 <GPIO_writePin+0x1c6>
    1caa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cac:	3d 81       	ldd	r19, Y+5	; 0x05
    1cae:	22 30       	cpi	r18, 0x02	; 2
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <GPIO_writePin+0x5a>
    1cb4:	5f c0       	rjmp	.+190    	; 0x1d74 <GPIO_writePin+0x118>
    1cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cba:	83 30       	cpi	r24, 0x03	; 3
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <GPIO_writePin+0x66>
    1cc0:	85 c0       	rjmp	.+266    	; 0x1dcc <GPIO_writePin+0x170>
    1cc2:	af c0       	rjmp	.+350    	; 0x1e22 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	a1 f4       	brne	.+40     	; 0x1cf2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1cca:	ab e3       	ldi	r26, 0x3B	; 59
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	eb e3       	ldi	r30, 0x3B	; 59
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	48 2f       	mov	r20, r24
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 2e       	mov	r0, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <GPIO_writePin+0x8c>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	0a 94       	dec	r0
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <GPIO_writePin+0x88>
    1cec:	84 2b       	or	r24, r20
    1cee:	8c 93       	st	X, r24
    1cf0:	98 c0       	rjmp	.+304    	; 0x1e22 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1cf2:	ab e3       	ldi	r26, 0x3B	; 59
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	eb e3       	ldi	r30, 0x3B	; 59
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 2e       	mov	r0, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <GPIO_writePin+0xb4>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	0a 94       	dec	r0
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <GPIO_writePin+0xb0>
    1d14:	80 95       	com	r24
    1d16:	84 23       	and	r24, r20
    1d18:	8c 93       	st	X, r24
    1d1a:	83 c0       	rjmp	.+262    	; 0x1e22 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	a1 f4       	brne	.+40     	; 0x1d4a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d22:	a8 e3       	ldi	r26, 0x38	; 56
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e8 e3       	ldi	r30, 0x38	; 56
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	48 2f       	mov	r20, r24
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 2e       	mov	r0, r18
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <GPIO_writePin+0xe4>
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	0a 94       	dec	r0
    1d42:	e2 f7       	brpl	.-8      	; 0x1d3c <GPIO_writePin+0xe0>
    1d44:	84 2b       	or	r24, r20
    1d46:	8c 93       	st	X, r24
    1d48:	6c c0       	rjmp	.+216    	; 0x1e22 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d4a:	a8 e3       	ldi	r26, 0x38	; 56
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e8 e3       	ldi	r30, 0x38	; 56
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	48 2f       	mov	r20, r24
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 2e       	mov	r0, r18
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <GPIO_writePin+0x10c>
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	0a 94       	dec	r0
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <GPIO_writePin+0x108>
    1d6c:	80 95       	com	r24
    1d6e:	84 23       	and	r24, r20
    1d70:	8c 93       	st	X, r24
    1d72:	57 c0       	rjmp	.+174    	; 0x1e22 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	81 30       	cpi	r24, 0x01	; 1
    1d78:	a1 f4       	brne	.+40     	; 0x1da2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1d7a:	a5 e3       	ldi	r26, 0x35	; 53
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	e5 e3       	ldi	r30, 0x35	; 53
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	48 2f       	mov	r20, r24
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	02 2e       	mov	r0, r18
    1d92:	02 c0       	rjmp	.+4      	; 0x1d98 <GPIO_writePin+0x13c>
    1d94:	88 0f       	add	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	0a 94       	dec	r0
    1d9a:	e2 f7       	brpl	.-8      	; 0x1d94 <GPIO_writePin+0x138>
    1d9c:	84 2b       	or	r24, r20
    1d9e:	8c 93       	st	X, r24
    1da0:	40 c0       	rjmp	.+128    	; 0x1e22 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1da2:	a5 e3       	ldi	r26, 0x35	; 53
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e5 e3       	ldi	r30, 0x35	; 53
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	48 2f       	mov	r20, r24
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	02 2e       	mov	r0, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <GPIO_writePin+0x164>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	0a 94       	dec	r0
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <GPIO_writePin+0x160>
    1dc4:	80 95       	com	r24
    1dc6:	84 23       	and	r24, r20
    1dc8:	8c 93       	st	X, r24
    1dca:	2b c0       	rjmp	.+86     	; 0x1e22 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	81 30       	cpi	r24, 0x01	; 1
    1dd0:	a1 f4       	brne	.+40     	; 0x1dfa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1dd2:	a2 e3       	ldi	r26, 0x32	; 50
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e2 e3       	ldi	r30, 0x32	; 50
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <GPIO_writePin+0x194>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <GPIO_writePin+0x190>
    1df4:	84 2b       	or	r24, r20
    1df6:	8c 93       	st	X, r24
    1df8:	14 c0       	rjmp	.+40     	; 0x1e22 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1dfa:	a2 e3       	ldi	r26, 0x32	; 50
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e2 e3       	ldi	r30, 0x32	; 50
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	48 2f       	mov	r20, r24
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 2e       	mov	r0, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <GPIO_writePin+0x1bc>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	0a 94       	dec	r0
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <GPIO_writePin+0x1b8>
    1e1c:	80 95       	com	r24
    1e1e:	84 23       	and	r24, r20
    1e20:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <GPIO_readPin+0x6>
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <GPIO_readPin+0x8>
    1e3a:	0f 92       	push	r0
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	8a 83       	std	Y+2, r24	; 0x02
    1e42:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e44:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	88 30       	cpi	r24, 0x08	; 8
    1e4a:	08 f0       	brcs	.+2      	; 0x1e4e <GPIO_readPin+0x1c>
    1e4c:	84 c0       	rjmp	.+264    	; 0x1f56 <GPIO_readPin+0x124>
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	84 30       	cpi	r24, 0x04	; 4
    1e52:	08 f0       	brcs	.+2      	; 0x1e56 <GPIO_readPin+0x24>
    1e54:	80 c0       	rjmp	.+256    	; 0x1f56 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	3d 83       	std	Y+5, r19	; 0x05
    1e5e:	2c 83       	std	Y+4, r18	; 0x04
    1e60:	4c 81       	ldd	r20, Y+4	; 0x04
    1e62:	5d 81       	ldd	r21, Y+5	; 0x05
    1e64:	41 30       	cpi	r20, 0x01	; 1
    1e66:	51 05       	cpc	r21, r1
    1e68:	79 f1       	breq	.+94     	; 0x1ec8 <GPIO_readPin+0x96>
    1e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6e:	82 30       	cpi	r24, 0x02	; 2
    1e70:	91 05       	cpc	r25, r1
    1e72:	34 f4       	brge	.+12     	; 0x1e80 <GPIO_readPin+0x4e>
    1e74:	2c 81       	ldd	r18, Y+4	; 0x04
    1e76:	3d 81       	ldd	r19, Y+5	; 0x05
    1e78:	21 15       	cp	r18, r1
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	69 f0       	breq	.+26     	; 0x1e98 <GPIO_readPin+0x66>
    1e7e:	6b c0       	rjmp	.+214    	; 0x1f56 <GPIO_readPin+0x124>
    1e80:	4c 81       	ldd	r20, Y+4	; 0x04
    1e82:	5d 81       	ldd	r21, Y+5	; 0x05
    1e84:	42 30       	cpi	r20, 0x02	; 2
    1e86:	51 05       	cpc	r21, r1
    1e88:	b9 f1       	breq	.+110    	; 0x1ef8 <GPIO_readPin+0xc6>
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	83 30       	cpi	r24, 0x03	; 3
    1e90:	91 05       	cpc	r25, r1
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <GPIO_readPin+0x64>
    1e94:	49 c0       	rjmp	.+146    	; 0x1f28 <GPIO_readPin+0xf6>
    1e96:	5f c0       	rjmp	.+190    	; 0x1f56 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1e98:	e9 e3       	ldi	r30, 0x39	; 57
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a9 01       	movw	r20, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <GPIO_readPin+0x7e>
    1eac:	55 95       	asr	r21
    1eae:	47 95       	ror	r20
    1eb0:	8a 95       	dec	r24
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <GPIO_readPin+0x7a>
    1eb4:	ca 01       	movw	r24, r20
    1eb6:	81 70       	andi	r24, 0x01	; 1
    1eb8:	90 70       	andi	r25, 0x00	; 0
    1eba:	88 23       	and	r24, r24
    1ebc:	19 f0       	breq	.+6      	; 0x1ec4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	49 c0       	rjmp	.+146    	; 0x1f56 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ec4:	19 82       	std	Y+1, r1	; 0x01
    1ec6:	47 c0       	rjmp	.+142    	; 0x1f56 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ec8:	e6 e3       	ldi	r30, 0x36	; 54
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	88 2f       	mov	r24, r24
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a9 01       	movw	r20, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <GPIO_readPin+0xae>
    1edc:	55 95       	asr	r21
    1ede:	47 95       	ror	r20
    1ee0:	8a 95       	dec	r24
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <GPIO_readPin+0xaa>
    1ee4:	ca 01       	movw	r24, r20
    1ee6:	81 70       	andi	r24, 0x01	; 1
    1ee8:	90 70       	andi	r25, 0x00	; 0
    1eea:	88 23       	and	r24, r24
    1eec:	19 f0       	breq	.+6      	; 0x1ef4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	31 c0       	rjmp	.+98     	; 0x1f56 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ef4:	19 82       	std	Y+1, r1	; 0x01
    1ef6:	2f c0       	rjmp	.+94     	; 0x1f56 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ef8:	e3 e3       	ldi	r30, 0x33	; 51
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	a9 01       	movw	r20, r18
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <GPIO_readPin+0xde>
    1f0c:	55 95       	asr	r21
    1f0e:	47 95       	ror	r20
    1f10:	8a 95       	dec	r24
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <GPIO_readPin+0xda>
    1f14:	ca 01       	movw	r24, r20
    1f16:	81 70       	andi	r24, 0x01	; 1
    1f18:	90 70       	andi	r25, 0x00	; 0
    1f1a:	88 23       	and	r24, r24
    1f1c:	19 f0       	breq	.+6      	; 0x1f24 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	89 83       	std	Y+1, r24	; 0x01
    1f22:	19 c0       	rjmp	.+50     	; 0x1f56 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f24:	19 82       	std	Y+1, r1	; 0x01
    1f26:	17 c0       	rjmp	.+46     	; 0x1f56 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f28:	e0 e3       	ldi	r30, 0x30	; 48
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	28 2f       	mov	r18, r24
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	88 2f       	mov	r24, r24
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	a9 01       	movw	r20, r18
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <GPIO_readPin+0x10e>
    1f3c:	55 95       	asr	r21
    1f3e:	47 95       	ror	r20
    1f40:	8a 95       	dec	r24
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <GPIO_readPin+0x10a>
    1f44:	ca 01       	movw	r24, r20
    1f46:	81 70       	andi	r24, 0x01	; 1
    1f48:	90 70       	andi	r25, 0x00	; 0
    1f4a:	88 23       	and	r24, r24
    1f4c:	19 f0       	breq	.+6      	; 0x1f54 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	01 c0       	rjmp	.+2      	; 0x1f56 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f54:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <GPIO_setupPortDirection+0x6>
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <GPIO_setupPortDirection+0x8>
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	84 30       	cpi	r24, 0x04	; 4
    1f7c:	90 f5       	brcc	.+100    	; 0x1fe2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	3c 83       	std	Y+4, r19	; 0x04
    1f86:	2b 83       	std	Y+3, r18	; 0x03
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	81 30       	cpi	r24, 0x01	; 1
    1f8e:	91 05       	cpc	r25, r1
    1f90:	d1 f0       	breq	.+52     	; 0x1fc6 <GPIO_setupPortDirection+0x5e>
    1f92:	2b 81       	ldd	r18, Y+3	; 0x03
    1f94:	3c 81       	ldd	r19, Y+4	; 0x04
    1f96:	22 30       	cpi	r18, 0x02	; 2
    1f98:	31 05       	cpc	r19, r1
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <GPIO_setupPortDirection+0x3e>
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	61 f0       	breq	.+24     	; 0x1fbc <GPIO_setupPortDirection+0x54>
    1fa4:	1e c0       	rjmp	.+60     	; 0x1fe2 <GPIO_setupPortDirection+0x7a>
    1fa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1fa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1faa:	22 30       	cpi	r18, 0x02	; 2
    1fac:	31 05       	cpc	r19, r1
    1fae:	81 f0       	breq	.+32     	; 0x1fd0 <GPIO_setupPortDirection+0x68>
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	83 30       	cpi	r24, 0x03	; 3
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	81 f0       	breq	.+32     	; 0x1fda <GPIO_setupPortDirection+0x72>
    1fba:	13 c0       	rjmp	.+38     	; 0x1fe2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1fbc:	ea e3       	ldi	r30, 0x3A	; 58
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	80 83       	st	Z, r24
    1fc4:	0e c0       	rjmp	.+28     	; 0x1fe2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1fc6:	e7 e3       	ldi	r30, 0x37	; 55
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	80 83       	st	Z, r24
    1fce:	09 c0       	rjmp	.+18     	; 0x1fe2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1fd0:	e4 e3       	ldi	r30, 0x34	; 52
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	80 83       	st	Z, r24
    1fd8:	04 c0       	rjmp	.+8      	; 0x1fe2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1fda:	e1 e3       	ldi	r30, 0x31	; 49
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	00 d0       	rcall	.+0      	; 0x1ff6 <GPIO_writePort+0x6>
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <GPIO_writePort+0x8>
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	84 30       	cpi	r24, 0x04	; 4
    2004:	90 f5       	brcc	.+100    	; 0x206a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	3c 83       	std	Y+4, r19	; 0x04
    200e:	2b 83       	std	Y+3, r18	; 0x03
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	81 30       	cpi	r24, 0x01	; 1
    2016:	91 05       	cpc	r25, r1
    2018:	d1 f0       	breq	.+52     	; 0x204e <GPIO_writePort+0x5e>
    201a:	2b 81       	ldd	r18, Y+3	; 0x03
    201c:	3c 81       	ldd	r19, Y+4	; 0x04
    201e:	22 30       	cpi	r18, 0x02	; 2
    2020:	31 05       	cpc	r19, r1
    2022:	2c f4       	brge	.+10     	; 0x202e <GPIO_writePort+0x3e>
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	9c 81       	ldd	r25, Y+4	; 0x04
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	61 f0       	breq	.+24     	; 0x2044 <GPIO_writePort+0x54>
    202c:	1e c0       	rjmp	.+60     	; 0x206a <GPIO_writePort+0x7a>
    202e:	2b 81       	ldd	r18, Y+3	; 0x03
    2030:	3c 81       	ldd	r19, Y+4	; 0x04
    2032:	22 30       	cpi	r18, 0x02	; 2
    2034:	31 05       	cpc	r19, r1
    2036:	81 f0       	breq	.+32     	; 0x2058 <GPIO_writePort+0x68>
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	9c 81       	ldd	r25, Y+4	; 0x04
    203c:	83 30       	cpi	r24, 0x03	; 3
    203e:	91 05       	cpc	r25, r1
    2040:	81 f0       	breq	.+32     	; 0x2062 <GPIO_writePort+0x72>
    2042:	13 c0       	rjmp	.+38     	; 0x206a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2044:	eb e3       	ldi	r30, 0x3B	; 59
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	80 83       	st	Z, r24
    204c:	0e c0       	rjmp	.+28     	; 0x206a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    204e:	e8 e3       	ldi	r30, 0x38	; 56
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	80 83       	st	Z, r24
    2056:	09 c0       	rjmp	.+18     	; 0x206a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2058:	e5 e3       	ldi	r30, 0x35	; 53
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	80 83       	st	Z, r24
    2060:	04 c0       	rjmp	.+8      	; 0x206a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2062:	e2 e3       	ldi	r30, 0x32	; 50
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	80 83       	st	Z, r24
			break;
		}
	}
}
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	00 d0       	rcall	.+0      	; 0x207e <GPIO_readPort+0x6>
    207e:	00 d0       	rcall	.+0      	; 0x2080 <GPIO_readPort+0x8>
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2086:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	84 30       	cpi	r24, 0x04	; 4
    208c:	90 f5       	brcc	.+100    	; 0x20f2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	3c 83       	std	Y+4, r19	; 0x04
    2096:	2b 83       	std	Y+3, r18	; 0x03
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	9c 81       	ldd	r25, Y+4	; 0x04
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	91 05       	cpc	r25, r1
    20a0:	d1 f0       	breq	.+52     	; 0x20d6 <GPIO_readPort+0x5e>
    20a2:	2b 81       	ldd	r18, Y+3	; 0x03
    20a4:	3c 81       	ldd	r19, Y+4	; 0x04
    20a6:	22 30       	cpi	r18, 0x02	; 2
    20a8:	31 05       	cpc	r19, r1
    20aa:	2c f4       	brge	.+10     	; 0x20b6 <GPIO_readPort+0x3e>
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	61 f0       	breq	.+24     	; 0x20cc <GPIO_readPort+0x54>
    20b4:	1e c0       	rjmp	.+60     	; 0x20f2 <GPIO_readPort+0x7a>
    20b6:	2b 81       	ldd	r18, Y+3	; 0x03
    20b8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ba:	22 30       	cpi	r18, 0x02	; 2
    20bc:	31 05       	cpc	r19, r1
    20be:	81 f0       	breq	.+32     	; 0x20e0 <GPIO_readPort+0x68>
    20c0:	8b 81       	ldd	r24, Y+3	; 0x03
    20c2:	9c 81       	ldd	r25, Y+4	; 0x04
    20c4:	83 30       	cpi	r24, 0x03	; 3
    20c6:	91 05       	cpc	r25, r1
    20c8:	81 f0       	breq	.+32     	; 0x20ea <GPIO_readPort+0x72>
    20ca:	13 c0       	rjmp	.+38     	; 0x20f2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    20cc:	e9 e3       	ldi	r30, 0x39	; 57
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	0e c0       	rjmp	.+28     	; 0x20f2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    20d6:	e6 e3       	ldi	r30, 0x36	; 54
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	09 c0       	rjmp	.+18     	; 0x20f2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    20e0:	e3 e3       	ldi	r30, 0x33	; 51
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	04 c0       	rjmp	.+8      	; 0x20f2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    20ea:	e0 e3       	ldi	r30, 0x30	; 48
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20f4:	0f 90       	pop	r0
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	00 d0       	rcall	.+0      	; 0x2108 <KEYPAD_getPressedKey+0x6>
    2108:	0f 92       	push	r0
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    210e:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2110:	1b 82       	std	Y+3, r1	; 0x03
    2112:	42 c0       	rjmp	.+132    	; 0x2198 <KEYPAD_getPressedKey+0x96>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	98 2f       	mov	r25, r24
    2120:	9c 5f       	subi	r25, 0xFC	; 252
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	69 2f       	mov	r22, r25
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	88 2f       	mov	r24, r24
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9c 01       	movw	r18, r24
    2134:	2c 5f       	subi	r18, 0xFC	; 252
    2136:	3f 4f       	sbci	r19, 0xFF	; 255
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <KEYPAD_getPressedKey+0x40>
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	2a 95       	dec	r18
    2144:	e2 f7       	brpl	.-8      	; 0x213e <KEYPAD_getPressedKey+0x3c>
    2146:	89 83       	std	Y+1, r24	; 0x01
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	69 81       	ldd	r22, Y+1	; 0x01
    214c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2150:	1a 82       	std	Y+2, r1	; 0x02
    2152:	1c c0       	rjmp	.+56     	; 0x218c <KEYPAD_getPressedKey+0x8a>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	6a 81       	ldd	r22, Y+2	; 0x02
    2158:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <GPIO_readPin>
    215c:	81 30       	cpi	r24, 0x01	; 1
    215e:	99 f4       	brne	.+38     	; 0x2186 <KEYPAD_getPressedKey+0x84>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	88 2f       	mov	r24, r24
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	98 2f       	mov	r25, r24
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	89 0f       	add	r24, r25
    2174:	8f 5f       	subi	r24, 0xFF	; 255
    2176:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	8f 5f       	subi	r24, 0xFF	; 255
    218a:	8a 83       	std	Y+2, r24	; 0x02
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	84 30       	cpi	r24, 0x04	; 4
    2190:	08 f3       	brcs	.-62     	; 0x2154 <KEYPAD_getPressedKey+0x52>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	8f 5f       	subi	r24, 0xFF	; 255
    2196:	8b 83       	std	Y+3, r24	; 0x03
    2198:	8b 81       	ldd	r24, Y+3	; 0x03
    219a:	84 30       	cpi	r24, 0x04	; 4
    219c:	08 f4       	brcc	.+2      	; 0x21a0 <KEYPAD_getPressedKey+0x9e>
    219e:	ba cf       	rjmp	.-140    	; 0x2114 <KEYPAD_getPressedKey+0x12>
    21a0:	b7 cf       	rjmp	.-146    	; 0x2110 <KEYPAD_getPressedKey+0xe>

000021a2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <KEYPAD_4x4_adjustKeyNumber+0x8>
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    21b0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	3c 83       	std	Y+4, r19	; 0x04
    21ba:	2b 83       	std	Y+3, r18	; 0x03
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	88 30       	cpi	r24, 0x08	; 8
    21c2:	91 05       	cpc	r25, r1
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    21c6:	70 c0       	rjmp	.+224    	; 0x22a8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    21c8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ca:	3c 81       	ldd	r19, Y+4	; 0x04
    21cc:	29 30       	cpi	r18, 0x09	; 9
    21ce:	31 05       	cpc	r19, r1
    21d0:	5c f5       	brge	.+86     	; 0x2228 <KEYPAD_4x4_adjustKeyNumber+0x86>
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	84 30       	cpi	r24, 0x04	; 4
    21d8:	91 05       	cpc	r25, r1
    21da:	09 f4       	brne	.+2      	; 0x21de <KEYPAD_4x4_adjustKeyNumber+0x3c>
    21dc:	59 c0       	rjmp	.+178    	; 0x2290 <KEYPAD_4x4_adjustKeyNumber+0xee>
    21de:	2b 81       	ldd	r18, Y+3	; 0x03
    21e0:	3c 81       	ldd	r19, Y+4	; 0x04
    21e2:	25 30       	cpi	r18, 0x05	; 5
    21e4:	31 05       	cpc	r19, r1
    21e6:	9c f4       	brge	.+38     	; 0x220e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	82 30       	cpi	r24, 0x02	; 2
    21ee:	91 05       	cpc	r25, r1
    21f0:	09 f4       	brne	.+2      	; 0x21f4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    21f2:	48 c0       	rjmp	.+144    	; 0x2284 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    21f4:	2b 81       	ldd	r18, Y+3	; 0x03
    21f6:	3c 81       	ldd	r19, Y+4	; 0x04
    21f8:	23 30       	cpi	r18, 0x03	; 3
    21fa:	31 05       	cpc	r19, r1
    21fc:	0c f0       	brlt	.+2      	; 0x2200 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    21fe:	45 c0       	rjmp	.+138    	; 0x228a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	91 05       	cpc	r25, r1
    2208:	09 f4       	brne	.+2      	; 0x220c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    220a:	39 c0       	rjmp	.+114    	; 0x227e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    220c:	67 c0       	rjmp	.+206    	; 0x22dc <KEYPAD_4x4_adjustKeyNumber+0x13a>
    220e:	2b 81       	ldd	r18, Y+3	; 0x03
    2210:	3c 81       	ldd	r19, Y+4	; 0x04
    2212:	26 30       	cpi	r18, 0x06	; 6
    2214:	31 05       	cpc	r19, r1
    2216:	09 f4       	brne	.+2      	; 0x221a <KEYPAD_4x4_adjustKeyNumber+0x78>
    2218:	41 c0       	rjmp	.+130    	; 0x229c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	87 30       	cpi	r24, 0x07	; 7
    2220:	91 05       	cpc	r25, r1
    2222:	0c f0       	brlt	.+2      	; 0x2226 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2224:	3e c0       	rjmp	.+124    	; 0x22a2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2226:	37 c0       	rjmp	.+110    	; 0x2296 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2228:	2b 81       	ldd	r18, Y+3	; 0x03
    222a:	3c 81       	ldd	r19, Y+4	; 0x04
    222c:	2c 30       	cpi	r18, 0x0C	; 12
    222e:	31 05       	cpc	r19, r1
    2230:	09 f4       	brne	.+2      	; 0x2234 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2232:	46 c0       	rjmp	.+140    	; 0x22c0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	8d 30       	cpi	r24, 0x0D	; 13
    223a:	91 05       	cpc	r25, r1
    223c:	5c f4       	brge	.+22     	; 0x2254 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    223e:	2b 81       	ldd	r18, Y+3	; 0x03
    2240:	3c 81       	ldd	r19, Y+4	; 0x04
    2242:	2a 30       	cpi	r18, 0x0A	; 10
    2244:	31 05       	cpc	r19, r1
    2246:	b1 f1       	breq	.+108    	; 0x22b4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	8b 30       	cpi	r24, 0x0B	; 11
    224e:	91 05       	cpc	r25, r1
    2250:	a4 f5       	brge	.+104    	; 0x22ba <KEYPAD_4x4_adjustKeyNumber+0x118>
    2252:	2d c0       	rjmp	.+90     	; 0x22ae <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2254:	2b 81       	ldd	r18, Y+3	; 0x03
    2256:	3c 81       	ldd	r19, Y+4	; 0x04
    2258:	2e 30       	cpi	r18, 0x0E	; 14
    225a:	31 05       	cpc	r19, r1
    225c:	b9 f1       	breq	.+110    	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	8e 30       	cpi	r24, 0x0E	; 14
    2264:	91 05       	cpc	r25, r1
    2266:	7c f1       	brlt	.+94     	; 0x22c6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2268:	2b 81       	ldd	r18, Y+3	; 0x03
    226a:	3c 81       	ldd	r19, Y+4	; 0x04
    226c:	2f 30       	cpi	r18, 0x0F	; 15
    226e:	31 05       	cpc	r19, r1
    2270:	79 f1       	breq	.+94     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	80 31       	cpi	r24, 0x10	; 16
    2278:	91 05       	cpc	r25, r1
    227a:	69 f1       	breq	.+90     	; 0x22d6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    227c:	2f c0       	rjmp	.+94     	; 0x22dc <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    227e:	87 e0       	ldi	r24, 0x07	; 7
    2280:	89 83       	std	Y+1, r24	; 0x01
    2282:	2e c0       	rjmp	.+92     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2284:	88 e0       	ldi	r24, 0x08	; 8
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	2b c0       	rjmp	.+86     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    228a:	89 e0       	ldi	r24, 0x09	; 9
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	28 c0       	rjmp	.+80     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2290:	85 e2       	ldi	r24, 0x25	; 37
    2292:	89 83       	std	Y+1, r24	; 0x01
    2294:	25 c0       	rjmp	.+74     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2296:	84 e0       	ldi	r24, 0x04	; 4
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	22 c0       	rjmp	.+68     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    229c:	85 e0       	ldi	r24, 0x05	; 5
    229e:	89 83       	std	Y+1, r24	; 0x01
    22a0:	1f c0       	rjmp	.+62     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    22a2:	86 e0       	ldi	r24, 0x06	; 6
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	1c c0       	rjmp	.+56     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    22a8:	8a e2       	ldi	r24, 0x2A	; 42
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	19 c0       	rjmp	.+50     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	16 c0       	rjmp	.+44     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	13 c0       	rjmp	.+38     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    22ba:	83 e0       	ldi	r24, 0x03	; 3
    22bc:	89 83       	std	Y+1, r24	; 0x01
    22be:	10 c0       	rjmp	.+32     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    22c0:	8d e2       	ldi	r24, 0x2D	; 45
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	0d c0       	rjmp	.+26     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    22c6:	8d e0       	ldi	r24, 0x0D	; 13
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	0a c0       	rjmp	.+20     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    22cc:	19 82       	std	Y+1, r1	; 0x01
    22ce:	08 c0       	rjmp	.+16     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    22d0:	8d e3       	ldi	r24, 0x3D	; 61
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	05 c0       	rjmp	.+10     	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    22d6:	8b e2       	ldi	r24, 0x2B	; 43
    22d8:	89 83       	std	Y+1, r24	; 0x01
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    22f8:	83 e0       	ldi	r24, 0x03	; 3
    22fa:	64 e0       	ldi	r22, 0x04	; 4
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	65 e0       	ldi	r22, 0x05	; 5
    2306:	41 e0       	ldi	r20, 0x01	; 1
    2308:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    230c:	83 e0       	ldi	r24, 0x03	; 3
    230e:	66 e0       	ldi	r22, 0x06	; 6
    2310:	41 e0       	ldi	r20, 0x01	; 1
    2312:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <GPIO_setupPinDirection>

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID,PIN_OUTPUT);
    2316:	82 e0       	ldi	r24, 0x02	; 2
    2318:	64 e0       	ldi	r22, 0x04	; 4
    231a:	41 e0       	ldi	r20, 0x01	; 1
    231c:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+1,PIN_OUTPUT);
    2320:	82 e0       	ldi	r24, 0x02	; 2
    2322:	65 e0       	ldi	r22, 0x05	; 5
    2324:	41 e0       	ldi	r20, 0x01	; 1
    2326:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+2,PIN_OUTPUT);
    232a:	82 e0       	ldi	r24, 0x02	; 2
    232c:	66 e0       	ldi	r22, 0x06	; 6
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_FIRST_DATA_PIN_ID+3,PIN_OUTPUT);
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	67 e0       	ldi	r22, 0x07	; 7
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_GO_TO_HOME);
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    2344:	88 e2       	ldi	r24, 0x28	; 40
    2346:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    234a:	8c e0       	ldi	r24, 0x0C	; 12
    234c:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
}
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    235c:	0f 93       	push	r16
    235e:	1f 93       	push	r17
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	c4 56       	subi	r28, 0x64	; 100
    236a:	d0 40       	sbci	r29, 0x00	; 0
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
    2376:	fe 01       	movw	r30, r28
    2378:	ec 59       	subi	r30, 0x9C	; 156
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    237e:	fe 01       	movw	r30, r28
    2380:	ed 59       	subi	r30, 0x9D	; 157
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2386:	83 e0       	ldi	r24, 0x03	; 3
    2388:	64 e0       	ldi	r22, 0x04	; 4
    238a:	40 e0       	ldi	r20, 0x00	; 0
    238c:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2390:	83 e0       	ldi	r24, 0x03	; 3
    2392:	65 e0       	ldi	r22, 0x05	; 5
    2394:	40 e0       	ldi	r20, 0x00	; 0
    2396:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_writePin>
    239a:	fe 01       	movw	r30, r28
    239c:	e1 5a       	subi	r30, 0xA1	; 161
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e8       	ldi	r26, 0x80	; 128
    23a6:	bf e3       	ldi	r27, 0x3F	; 63
    23a8:	80 83       	st	Z, r24
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	a2 83       	std	Z+2, r26	; 0x02
    23ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	8e 01       	movw	r16, r28
    23b2:	05 5a       	subi	r16, 0xA5	; 165
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	fe 01       	movw	r30, r28
    23b8:	e1 5a       	subi	r30, 0xA1	; 161
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a e7       	ldi	r20, 0x7A	; 122
    23ca:	53 e4       	ldi	r21, 0x43	; 67
    23cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	f8 01       	movw	r30, r16
    23d6:	80 83       	st	Z, r24
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	a2 83       	std	Z+2, r26	; 0x02
    23dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23de:	fe 01       	movw	r30, r28
    23e0:	e5 5a       	subi	r30, 0xA5	; 165
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	60 81       	ld	r22, Z
    23e6:	71 81       	ldd	r23, Z+1	; 0x01
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	93 81       	ldd	r25, Z+3	; 0x03
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	44 f4       	brge	.+16     	; 0x240c <LCD_sendCommand+0xb0>
		__ticks = 1;
    23fc:	fe 01       	movw	r30, r28
    23fe:	e7 5a       	subi	r30, 0xA7	; 167
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	80 83       	st	Z, r24
    240a:	64 c0       	rjmp	.+200    	; 0x24d4 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    240c:	fe 01       	movw	r30, r28
    240e:	e5 5a       	subi	r30, 0xA5	; 165
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	60 81       	ld	r22, Z
    2414:	71 81       	ldd	r23, Z+1	; 0x01
    2416:	82 81       	ldd	r24, Z+2	; 0x02
    2418:	93 81       	ldd	r25, Z+3	; 0x03
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	3f ef       	ldi	r19, 0xFF	; 255
    241e:	4f e7       	ldi	r20, 0x7F	; 127
    2420:	57 e4       	ldi	r21, 0x47	; 71
    2422:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2426:	18 16       	cp	r1, r24
    2428:	0c f0       	brlt	.+2      	; 0x242c <LCD_sendCommand+0xd0>
    242a:	43 c0       	rjmp	.+134    	; 0x24b2 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	fe 01       	movw	r30, r28
    242e:	e1 5a       	subi	r30, 0xA1	; 161
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	51 e4       	ldi	r21, 0x41	; 65
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8e 01       	movw	r16, r28
    244c:	07 5a       	subi	r16, 0xA7	; 167
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	f8 01       	movw	r30, r16
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
    2462:	1f c0       	rjmp	.+62     	; 0x24a2 <LCD_sendCommand+0x146>
    2464:	fe 01       	movw	r30, r28
    2466:	e9 5a       	subi	r30, 0xA9	; 169
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	89 e1       	ldi	r24, 0x19	; 25
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	80 83       	st	Z, r24
    2472:	fe 01       	movw	r30, r28
    2474:	e9 5a       	subi	r30, 0xA9	; 169
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 81       	ld	r24, Z
    247a:	91 81       	ldd	r25, Z+1	; 0x01
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_sendCommand+0x120>
    2480:	fe 01       	movw	r30, r28
    2482:	e9 5a       	subi	r30, 0xA9	; 169
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248a:	de 01       	movw	r26, r28
    248c:	a7 5a       	subi	r26, 0xA7	; 167
    248e:	bf 4f       	sbci	r27, 0xFF	; 255
    2490:	fe 01       	movw	r30, r28
    2492:	e7 5a       	subi	r30, 0xA7	; 167
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	11 96       	adiw	r26, 0x01	; 1
    249e:	9c 93       	st	X, r25
    24a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a2:	fe 01       	movw	r30, r28
    24a4:	e7 5a       	subi	r30, 0xA7	; 167
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	d1 f6       	brne	.-76     	; 0x2464 <LCD_sendCommand+0x108>
    24b0:	27 c0       	rjmp	.+78     	; 0x2500 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	8e 01       	movw	r16, r28
    24b4:	07 5a       	subi	r16, 0xA7	; 167
    24b6:	1f 4f       	sbci	r17, 0xFF	; 255
    24b8:	fe 01       	movw	r30, r28
    24ba:	e5 5a       	subi	r30, 0xA5	; 165
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	60 81       	ld	r22, Z
    24c0:	71 81       	ldd	r23, Z+1	; 0x01
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	93 81       	ldd	r25, Z+3	; 0x03
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	f8 01       	movw	r30, r16
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24
    24d4:	de 01       	movw	r26, r28
    24d6:	ab 5a       	subi	r26, 0xAB	; 171
    24d8:	bf 4f       	sbci	r27, 0xFF	; 255
    24da:	fe 01       	movw	r30, r28
    24dc:	e7 5a       	subi	r30, 0xA7	; 167
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 81       	ld	r24, Z
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	8d 93       	st	X+, r24
    24e6:	9c 93       	st	X, r25
    24e8:	fe 01       	movw	r30, r28
    24ea:	eb 5a       	subi	r30, 0xAB	; 171
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	91 81       	ldd	r25, Z+1	; 0x01
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_sendCommand+0x196>
    24f6:	fe 01       	movw	r30, r28
    24f8:	eb 5a       	subi	r30, 0xAB	; 171
    24fa:	ff 4f       	sbci	r31, 0xFF	; 255
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2500:	83 e0       	ldi	r24, 0x03	; 3
    2502:	66 e0       	ldi	r22, 0x06	; 6
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_writePin>
    250a:	fe 01       	movw	r30, r28
    250c:	ef 5a       	subi	r30, 0xAF	; 175
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e8       	ldi	r26, 0x80	; 128
    2516:	bf e3       	ldi	r27, 0x3F	; 63
    2518:	80 83       	st	Z, r24
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	a2 83       	std	Z+2, r26	; 0x02
    251e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2520:	8e 01       	movw	r16, r28
    2522:	03 5b       	subi	r16, 0xB3	; 179
    2524:	1f 4f       	sbci	r17, 0xFF	; 255
    2526:	fe 01       	movw	r30, r28
    2528:	ef 5a       	subi	r30, 0xAF	; 175
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	60 81       	ld	r22, Z
    252e:	71 81       	ldd	r23, Z+1	; 0x01
    2530:	82 81       	ldd	r24, Z+2	; 0x02
    2532:	93 81       	ldd	r25, Z+3	; 0x03
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	4a e7       	ldi	r20, 0x7A	; 122
    253a:	53 e4       	ldi	r21, 0x43	; 67
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	f8 01       	movw	r30, r16
    2546:	80 83       	st	Z, r24
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	a2 83       	std	Z+2, r26	; 0x02
    254c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    254e:	fe 01       	movw	r30, r28
    2550:	e3 5b       	subi	r30, 0xB3	; 179
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	60 81       	ld	r22, Z
    2556:	71 81       	ldd	r23, Z+1	; 0x01
    2558:	82 81       	ldd	r24, Z+2	; 0x02
    255a:	93 81       	ldd	r25, Z+3	; 0x03
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e8       	ldi	r20, 0x80	; 128
    2562:	5f e3       	ldi	r21, 0x3F	; 63
    2564:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2568:	88 23       	and	r24, r24
    256a:	44 f4       	brge	.+16     	; 0x257c <LCD_sendCommand+0x220>
		__ticks = 1;
    256c:	fe 01       	movw	r30, r28
    256e:	e5 5b       	subi	r30, 0xB5	; 181
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
    257a:	64 c0       	rjmp	.+200    	; 0x2644 <LCD_sendCommand+0x2e8>
	else if (__tmp > 65535)
    257c:	fe 01       	movw	r30, r28
    257e:	e3 5b       	subi	r30, 0xB3	; 179
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	60 81       	ld	r22, Z
    2584:	71 81       	ldd	r23, Z+1	; 0x01
    2586:	82 81       	ldd	r24, Z+2	; 0x02
    2588:	93 81       	ldd	r25, Z+3	; 0x03
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	3f ef       	ldi	r19, 0xFF	; 255
    258e:	4f e7       	ldi	r20, 0x7F	; 127
    2590:	57 e4       	ldi	r21, 0x47	; 71
    2592:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2596:	18 16       	cp	r1, r24
    2598:	0c f0       	brlt	.+2      	; 0x259c <LCD_sendCommand+0x240>
    259a:	43 c0       	rjmp	.+134    	; 0x2622 <LCD_sendCommand+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259c:	fe 01       	movw	r30, r28
    259e:	ef 5a       	subi	r30, 0xAF	; 175
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	60 81       	ld	r22, Z
    25a4:	71 81       	ldd	r23, Z+1	; 0x01
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	93 81       	ldd	r25, Z+3	; 0x03
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e2       	ldi	r20, 0x20	; 32
    25b0:	51 e4       	ldi	r21, 0x41	; 65
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	8e 01       	movw	r16, r28
    25bc:	05 5b       	subi	r16, 0xB5	; 181
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	bc 01       	movw	r22, r24
    25c2:	cd 01       	movw	r24, r26
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	f8 01       	movw	r30, r16
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	80 83       	st	Z, r24
    25d2:	1f c0       	rjmp	.+62     	; 0x2612 <LCD_sendCommand+0x2b6>
    25d4:	fe 01       	movw	r30, r28
    25d6:	e7 5b       	subi	r30, 0xB7	; 183
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	89 e1       	ldi	r24, 0x19	; 25
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	91 83       	std	Z+1, r25	; 0x01
    25e0:	80 83       	st	Z, r24
    25e2:	fe 01       	movw	r30, r28
    25e4:	e7 5b       	subi	r30, 0xB7	; 183
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 81       	ld	r24, Z
    25ea:	91 81       	ldd	r25, Z+1	; 0x01
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <LCD_sendCommand+0x290>
    25f0:	fe 01       	movw	r30, r28
    25f2:	e7 5b       	subi	r30, 0xB7	; 183
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fa:	de 01       	movw	r26, r28
    25fc:	a5 5b       	subi	r26, 0xB5	; 181
    25fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2600:	fe 01       	movw	r30, r28
    2602:	e5 5b       	subi	r30, 0xB5	; 181
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	80 81       	ld	r24, Z
    2608:	91 81       	ldd	r25, Z+1	; 0x01
    260a:	01 97       	sbiw	r24, 0x01	; 1
    260c:	11 96       	adiw	r26, 0x01	; 1
    260e:	9c 93       	st	X, r25
    2610:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2612:	fe 01       	movw	r30, r28
    2614:	e5 5b       	subi	r30, 0xB5	; 181
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	80 81       	ld	r24, Z
    261a:	91 81       	ldd	r25, Z+1	; 0x01
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	d1 f6       	brne	.-76     	; 0x25d4 <LCD_sendCommand+0x278>
    2620:	27 c0       	rjmp	.+78     	; 0x2670 <LCD_sendCommand+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2622:	8e 01       	movw	r16, r28
    2624:	05 5b       	subi	r16, 0xB5	; 181
    2626:	1f 4f       	sbci	r17, 0xFF	; 255
    2628:	fe 01       	movw	r30, r28
    262a:	e3 5b       	subi	r30, 0xB3	; 179
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	f8 01       	movw	r30, r16
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	80 83       	st	Z, r24
    2644:	de 01       	movw	r26, r28
    2646:	a9 5b       	subi	r26, 0xB9	; 185
    2648:	bf 4f       	sbci	r27, 0xFF	; 255
    264a:	fe 01       	movw	r30, r28
    264c:	e5 5b       	subi	r30, 0xB5	; 181
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	8d 93       	st	X+, r24
    2656:	9c 93       	st	X, r25
    2658:	fe 01       	movw	r30, r28
    265a:	e9 5b       	subi	r30, 0xB9	; 185
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	80 81       	ld	r24, Z
    2660:	91 81       	ldd	r25, Z+1	; 0x01
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <LCD_sendCommand+0x306>
    2666:	fe 01       	movw	r30, r28
    2668:	e9 5b       	subi	r30, 0xB9	; 185
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	0e 94 3c 10 	call	0x2078	; 0x2078 <GPIO_readPort>
    2676:	fe 01       	movw	r30, r28
    2678:	ed 59       	subi	r30, 0x9D	; 157
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (command & 0xF0);
    267e:	fe 01       	movw	r30, r28
    2680:	ed 59       	subi	r30, 0x9D	; 157
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	80 81       	ld	r24, Z
    2686:	98 2f       	mov	r25, r24
    2688:	9f 70       	andi	r25, 0x0F	; 15
    268a:	fe 01       	movw	r30, r28
    268c:	ec 59       	subi	r30, 0x9C	; 156
    268e:	ff 4f       	sbci	r31, 0xFF	; 255
    2690:	80 81       	ld	r24, Z
    2692:	80 7f       	andi	r24, 0xF0	; 240
    2694:	89 2b       	or	r24, r25
    2696:	fe 01       	movw	r30, r28
    2698:	ed 59       	subi	r30, 0x9D	; 157
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((command & 0xF0) >> 4);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    269e:	fe 01       	movw	r30, r28
    26a0:	ed 59       	subi	r30, 0x9D	; 157
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	82 e0       	ldi	r24, 0x02	; 2
    26a6:	60 81       	ld	r22, Z
    26a8:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <GPIO_writePort>
    26ac:	fe 01       	movw	r30, r28
    26ae:	ed 5b       	subi	r30, 0xBD	; 189
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a0 e8       	ldi	r26, 0x80	; 128
    26b8:	bf e3       	ldi	r27, 0x3F	; 63
    26ba:	80 83       	st	Z, r24
    26bc:	91 83       	std	Z+1, r25	; 0x01
    26be:	a2 83       	std	Z+2, r26	; 0x02
    26c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	8e 01       	movw	r16, r28
    26c4:	01 5c       	subi	r16, 0xC1	; 193
    26c6:	1f 4f       	sbci	r17, 0xFF	; 255
    26c8:	fe 01       	movw	r30, r28
    26ca:	ed 5b       	subi	r30, 0xBD	; 189
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	4a e7       	ldi	r20, 0x7A	; 122
    26dc:	53 e4       	ldi	r21, 0x43	; 67
    26de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	f8 01       	movw	r30, r16
    26e8:	80 83       	st	Z, r24
    26ea:	91 83       	std	Z+1, r25	; 0x01
    26ec:	a2 83       	std	Z+2, r26	; 0x02
    26ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26f0:	fe 01       	movw	r30, r28
    26f2:	ff 96       	adiw	r30, 0x3f	; 63
    26f4:	60 81       	ld	r22, Z
    26f6:	71 81       	ldd	r23, Z+1	; 0x01
    26f8:	82 81       	ldd	r24, Z+2	; 0x02
    26fa:	93 81       	ldd	r25, Z+3	; 0x03
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	2c f4       	brge	.+10     	; 0x2716 <LCD_sendCommand+0x3ba>
		__ticks = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9e af       	std	Y+62, r25	; 0x3e
    2712:	8d af       	std	Y+61, r24	; 0x3d
    2714:	46 c0       	rjmp	.+140    	; 0x27a2 <LCD_sendCommand+0x446>
	else if (__tmp > 65535)
    2716:	fe 01       	movw	r30, r28
    2718:	ff 96       	adiw	r30, 0x3f	; 63
    271a:	60 81       	ld	r22, Z
    271c:	71 81       	ldd	r23, Z+1	; 0x01
    271e:	82 81       	ldd	r24, Z+2	; 0x02
    2720:	93 81       	ldd	r25, Z+3	; 0x03
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	3f ef       	ldi	r19, 0xFF	; 255
    2726:	4f e7       	ldi	r20, 0x7F	; 127
    2728:	57 e4       	ldi	r21, 0x47	; 71
    272a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272e:	18 16       	cp	r1, r24
    2730:	64 f5       	brge	.+88     	; 0x278a <LCD_sendCommand+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2732:	fe 01       	movw	r30, r28
    2734:	ed 5b       	subi	r30, 0xBD	; 189
    2736:	ff 4f       	sbci	r31, 0xFF	; 255
    2738:	60 81       	ld	r22, Z
    273a:	71 81       	ldd	r23, Z+1	; 0x01
    273c:	82 81       	ldd	r24, Z+2	; 0x02
    273e:	93 81       	ldd	r25, Z+3	; 0x03
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	40 e2       	ldi	r20, 0x20	; 32
    2746:	51 e4       	ldi	r21, 0x41	; 65
    2748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	9e af       	std	Y+62, r25	; 0x3e
    275e:	8d af       	std	Y+61, r24	; 0x3d
    2760:	0f c0       	rjmp	.+30     	; 0x2780 <LCD_sendCommand+0x424>
    2762:	89 e1       	ldi	r24, 0x19	; 25
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	9c af       	std	Y+60, r25	; 0x3c
    2768:	8b af       	std	Y+59, r24	; 0x3b
    276a:	8b ad       	ldd	r24, Y+59	; 0x3b
    276c:	9c ad       	ldd	r25, Y+60	; 0x3c
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <LCD_sendCommand+0x412>
    2772:	9c af       	std	Y+60, r25	; 0x3c
    2774:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2776:	8d ad       	ldd	r24, Y+61	; 0x3d
    2778:	9e ad       	ldd	r25, Y+62	; 0x3e
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	9e af       	std	Y+62, r25	; 0x3e
    277e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2780:	8d ad       	ldd	r24, Y+61	; 0x3d
    2782:	9e ad       	ldd	r25, Y+62	; 0x3e
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	69 f7       	brne	.-38     	; 0x2762 <LCD_sendCommand+0x406>
    2788:	16 c0       	rjmp	.+44     	; 0x27b6 <LCD_sendCommand+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278a:	fe 01       	movw	r30, r28
    278c:	ff 96       	adiw	r30, 0x3f	; 63
    278e:	60 81       	ld	r22, Z
    2790:	71 81       	ldd	r23, Z+1	; 0x01
    2792:	82 81       	ldd	r24, Z+2	; 0x02
    2794:	93 81       	ldd	r25, Z+3	; 0x03
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9e af       	std	Y+62, r25	; 0x3e
    27a0:	8d af       	std	Y+61, r24	; 0x3d
    27a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    27a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    27a6:	9a af       	std	Y+58, r25	; 0x3a
    27a8:	89 af       	std	Y+57, r24	; 0x39
    27aa:	89 ad       	ldd	r24, Y+57	; 0x39
    27ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <LCD_sendCommand+0x452>
    27b2:	9a af       	std	Y+58, r25	; 0x3a
    27b4:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    27b6:	83 e0       	ldi	r24, 0x03	; 3
    27b8:	66 e0       	ldi	r22, 0x06	; 6
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_writePin>
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	a0 e8       	ldi	r26, 0x80	; 128
    27c6:	bf e3       	ldi	r27, 0x3F	; 63
    27c8:	8d ab       	std	Y+53, r24	; 0x35
    27ca:	9e ab       	std	Y+54, r25	; 0x36
    27cc:	af ab       	std	Y+55, r26	; 0x37
    27ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d0:	6d a9       	ldd	r22, Y+53	; 0x35
    27d2:	7e a9       	ldd	r23, Y+54	; 0x36
    27d4:	8f a9       	ldd	r24, Y+55	; 0x37
    27d6:	98 ad       	ldd	r25, Y+56	; 0x38
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	4a e7       	ldi	r20, 0x7A	; 122
    27de:	53 e4       	ldi	r21, 0x43	; 67
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	89 ab       	std	Y+49, r24	; 0x31
    27ea:	9a ab       	std	Y+50, r25	; 0x32
    27ec:	ab ab       	std	Y+51, r26	; 0x33
    27ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27f0:	69 a9       	ldd	r22, Y+49	; 0x31
    27f2:	7a a9       	ldd	r23, Y+50	; 0x32
    27f4:	8b a9       	ldd	r24, Y+51	; 0x33
    27f6:	9c a9       	ldd	r25, Y+52	; 0x34
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e8       	ldi	r20, 0x80	; 128
    27fe:	5f e3       	ldi	r21, 0x3F	; 63
    2800:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2804:	88 23       	and	r24, r24
    2806:	2c f4       	brge	.+10     	; 0x2812 <LCD_sendCommand+0x4b6>
		__ticks = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	98 ab       	std	Y+48, r25	; 0x30
    280e:	8f a7       	std	Y+47, r24	; 0x2f
    2810:	3f c0       	rjmp	.+126    	; 0x2890 <LCD_sendCommand+0x534>
	else if (__tmp > 65535)
    2812:	69 a9       	ldd	r22, Y+49	; 0x31
    2814:	7a a9       	ldd	r23, Y+50	; 0x32
    2816:	8b a9       	ldd	r24, Y+51	; 0x33
    2818:	9c a9       	ldd	r25, Y+52	; 0x34
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	3f ef       	ldi	r19, 0xFF	; 255
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	57 e4       	ldi	r21, 0x47	; 71
    2822:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2826:	18 16       	cp	r1, r24
    2828:	4c f5       	brge	.+82     	; 0x287c <LCD_sendCommand+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282a:	6d a9       	ldd	r22, Y+53	; 0x35
    282c:	7e a9       	ldd	r23, Y+54	; 0x36
    282e:	8f a9       	ldd	r24, Y+55	; 0x37
    2830:	98 ad       	ldd	r25, Y+56	; 0x38
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e2       	ldi	r20, 0x20	; 32
    2838:	51 e4       	ldi	r21, 0x41	; 65
    283a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	98 ab       	std	Y+48, r25	; 0x30
    2850:	8f a7       	std	Y+47, r24	; 0x2f
    2852:	0f c0       	rjmp	.+30     	; 0x2872 <LCD_sendCommand+0x516>
    2854:	89 e1       	ldi	r24, 0x19	; 25
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9e a7       	std	Y+46, r25	; 0x2e
    285a:	8d a7       	std	Y+45, r24	; 0x2d
    285c:	8d a5       	ldd	r24, Y+45	; 0x2d
    285e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <LCD_sendCommand+0x504>
    2864:	9e a7       	std	Y+46, r25	; 0x2e
    2866:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2868:	8f a5       	ldd	r24, Y+47	; 0x2f
    286a:	98 a9       	ldd	r25, Y+48	; 0x30
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	98 ab       	std	Y+48, r25	; 0x30
    2870:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2872:	8f a5       	ldd	r24, Y+47	; 0x2f
    2874:	98 a9       	ldd	r25, Y+48	; 0x30
    2876:	00 97       	sbiw	r24, 0x00	; 0
    2878:	69 f7       	brne	.-38     	; 0x2854 <LCD_sendCommand+0x4f8>
    287a:	14 c0       	rjmp	.+40     	; 0x28a4 <LCD_sendCommand+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287c:	69 a9       	ldd	r22, Y+49	; 0x31
    287e:	7a a9       	ldd	r23, Y+50	; 0x32
    2880:	8b a9       	ldd	r24, Y+51	; 0x33
    2882:	9c a9       	ldd	r25, Y+52	; 0x34
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	98 ab       	std	Y+48, r25	; 0x30
    288e:	8f a7       	std	Y+47, r24	; 0x2f
    2890:	8f a5       	ldd	r24, Y+47	; 0x2f
    2892:	98 a9       	ldd	r25, Y+48	; 0x30
    2894:	9c a7       	std	Y+44, r25	; 0x2c
    2896:	8b a7       	std	Y+43, r24	; 0x2b
    2898:	8b a5       	ldd	r24, Y+43	; 0x2b
    289a:	9c a5       	ldd	r25, Y+44	; 0x2c
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <LCD_sendCommand+0x540>
    28a0:	9c a7       	std	Y+44, r25	; 0x2c
    28a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28a4:	83 e0       	ldi	r24, 0x03	; 3
    28a6:	66 e0       	ldi	r22, 0x06	; 6
    28a8:	41 e0       	ldi	r20, 0x01	; 1
    28aa:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_writePin>
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	a0 e8       	ldi	r26, 0x80	; 128
    28b4:	bf e3       	ldi	r27, 0x3F	; 63
    28b6:	8f a3       	std	Y+39, r24	; 0x27
    28b8:	98 a7       	std	Y+40, r25	; 0x28
    28ba:	a9 a7       	std	Y+41, r26	; 0x29
    28bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28be:	6f a1       	ldd	r22, Y+39	; 0x27
    28c0:	78 a5       	ldd	r23, Y+40	; 0x28
    28c2:	89 a5       	ldd	r24, Y+41	; 0x29
    28c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	4a e7       	ldi	r20, 0x7A	; 122
    28cc:	53 e4       	ldi	r21, 0x43	; 67
    28ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	8b a3       	std	Y+35, r24	; 0x23
    28d8:	9c a3       	std	Y+36, r25	; 0x24
    28da:	ad a3       	std	Y+37, r26	; 0x25
    28dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28de:	6b a1       	ldd	r22, Y+35	; 0x23
    28e0:	7c a1       	ldd	r23, Y+36	; 0x24
    28e2:	8d a1       	ldd	r24, Y+37	; 0x25
    28e4:	9e a1       	ldd	r25, Y+38	; 0x26
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	40 e8       	ldi	r20, 0x80	; 128
    28ec:	5f e3       	ldi	r21, 0x3F	; 63
    28ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f2:	88 23       	and	r24, r24
    28f4:	2c f4       	brge	.+10     	; 0x2900 <LCD_sendCommand+0x5a4>
		__ticks = 1;
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	9a a3       	std	Y+34, r25	; 0x22
    28fc:	89 a3       	std	Y+33, r24	; 0x21
    28fe:	3f c0       	rjmp	.+126    	; 0x297e <LCD_sendCommand+0x622>
	else if (__tmp > 65535)
    2900:	6b a1       	ldd	r22, Y+35	; 0x23
    2902:	7c a1       	ldd	r23, Y+36	; 0x24
    2904:	8d a1       	ldd	r24, Y+37	; 0x25
    2906:	9e a1       	ldd	r25, Y+38	; 0x26
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	3f ef       	ldi	r19, 0xFF	; 255
    290c:	4f e7       	ldi	r20, 0x7F	; 127
    290e:	57 e4       	ldi	r21, 0x47	; 71
    2910:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2914:	18 16       	cp	r1, r24
    2916:	4c f5       	brge	.+82     	; 0x296a <LCD_sendCommand+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2918:	6f a1       	ldd	r22, Y+39	; 0x27
    291a:	78 a5       	ldd	r23, Y+40	; 0x28
    291c:	89 a5       	ldd	r24, Y+41	; 0x29
    291e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e2       	ldi	r20, 0x20	; 32
    2926:	51 e4       	ldi	r21, 0x41	; 65
    2928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	bc 01       	movw	r22, r24
    2932:	cd 01       	movw	r24, r26
    2934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	9a a3       	std	Y+34, r25	; 0x22
    293e:	89 a3       	std	Y+33, r24	; 0x21
    2940:	0f c0       	rjmp	.+30     	; 0x2960 <LCD_sendCommand+0x604>
    2942:	89 e1       	ldi	r24, 0x19	; 25
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	98 a3       	std	Y+32, r25	; 0x20
    2948:	8f 8f       	std	Y+31, r24	; 0x1f
    294a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    294c:	98 a1       	ldd	r25, Y+32	; 0x20
    294e:	01 97       	sbiw	r24, 0x01	; 1
    2950:	f1 f7       	brne	.-4      	; 0x294e <LCD_sendCommand+0x5f2>
    2952:	98 a3       	std	Y+32, r25	; 0x20
    2954:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2956:	89 a1       	ldd	r24, Y+33	; 0x21
    2958:	9a a1       	ldd	r25, Y+34	; 0x22
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	9a a3       	std	Y+34, r25	; 0x22
    295e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2960:	89 a1       	ldd	r24, Y+33	; 0x21
    2962:	9a a1       	ldd	r25, Y+34	; 0x22
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	69 f7       	brne	.-38     	; 0x2942 <LCD_sendCommand+0x5e6>
    2968:	14 c0       	rjmp	.+40     	; 0x2992 <LCD_sendCommand+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    296a:	6b a1       	ldd	r22, Y+35	; 0x23
    296c:	7c a1       	ldd	r23, Y+36	; 0x24
    296e:	8d a1       	ldd	r24, Y+37	; 0x25
    2970:	9e a1       	ldd	r25, Y+38	; 0x26
    2972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	9a a3       	std	Y+34, r25	; 0x22
    297c:	89 a3       	std	Y+33, r24	; 0x21
    297e:	89 a1       	ldd	r24, Y+33	; 0x21
    2980:	9a a1       	ldd	r25, Y+34	; 0x22
    2982:	9e 8f       	std	Y+30, r25	; 0x1e
    2984:	8d 8f       	std	Y+29, r24	; 0x1d
    2986:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2988:	9e 8d       	ldd	r25, Y+30	; 0x1e
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <LCD_sendCommand+0x62e>
    298e:	9e 8f       	std	Y+30, r25	; 0x1e
    2990:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required command to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2992:	82 e0       	ldi	r24, 0x02	; 2
    2994:	0e 94 3c 10 	call	0x2078	; 0x2078 <GPIO_readPort>
    2998:	fe 01       	movw	r30, r28
    299a:	ed 59       	subi	r30, 0x9D	; 157
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((command & 0x0F) << 4);
    29a0:	fe 01       	movw	r30, r28
    29a2:	ed 59       	subi	r30, 0x9D	; 157
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	28 2f       	mov	r18, r24
    29aa:	2f 70       	andi	r18, 0x0F	; 15
    29ac:	fe 01       	movw	r30, r28
    29ae:	ec 59       	subi	r30, 0x9C	; 156
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 81       	ld	r24, Z
    29b4:	88 2f       	mov	r24, r24
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	82 95       	swap	r24
    29ba:	92 95       	swap	r25
    29bc:	90 7f       	andi	r25, 0xF0	; 240
    29be:	98 27       	eor	r25, r24
    29c0:	80 7f       	andi	r24, 0xF0	; 240
    29c2:	98 27       	eor	r25, r24
    29c4:	82 2b       	or	r24, r18
    29c6:	fe 01       	movw	r30, r28
    29c8:	ed 59       	subi	r30, 0x9D	; 157
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (command & 0x0F);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    29ce:	fe 01       	movw	r30, r28
    29d0:	ed 59       	subi	r30, 0x9D	; 157
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	60 81       	ld	r22, Z
    29d8:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <GPIO_writePort>
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	a0 e8       	ldi	r26, 0x80	; 128
    29e2:	bf e3       	ldi	r27, 0x3F	; 63
    29e4:	89 8f       	std	Y+25, r24	; 0x19
    29e6:	9a 8f       	std	Y+26, r25	; 0x1a
    29e8:	ab 8f       	std	Y+27, r26	; 0x1b
    29ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ec:	69 8d       	ldd	r22, Y+25	; 0x19
    29ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	4a e7       	ldi	r20, 0x7A	; 122
    29fa:	53 e4       	ldi	r21, 0x43	; 67
    29fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	8d 8b       	std	Y+21, r24	; 0x15
    2a06:	9e 8b       	std	Y+22, r25	; 0x16
    2a08:	af 8b       	std	Y+23, r26	; 0x17
    2a0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a10:	8f 89       	ldd	r24, Y+23	; 0x17
    2a12:	98 8d       	ldd	r25, Y+24	; 0x18
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e8       	ldi	r20, 0x80	; 128
    2a1a:	5f e3       	ldi	r21, 0x3F	; 63
    2a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a20:	88 23       	and	r24, r24
    2a22:	2c f4       	brge	.+10     	; 0x2a2e <LCD_sendCommand+0x6d2>
		__ticks = 1;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9c 8b       	std	Y+20, r25	; 0x14
    2a2a:	8b 8b       	std	Y+19, r24	; 0x13
    2a2c:	3f c0       	rjmp	.+126    	; 0x2aac <LCD_sendCommand+0x750>
	else if (__tmp > 65535)
    2a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a30:	7e 89       	ldd	r23, Y+22	; 0x16
    2a32:	8f 89       	ldd	r24, Y+23	; 0x17
    2a34:	98 8d       	ldd	r25, Y+24	; 0x18
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	3f ef       	ldi	r19, 0xFF	; 255
    2a3a:	4f e7       	ldi	r20, 0x7F	; 127
    2a3c:	57 e4       	ldi	r21, 0x47	; 71
    2a3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a42:	18 16       	cp	r1, r24
    2a44:	4c f5       	brge	.+82     	; 0x2a98 <LCD_sendCommand+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a46:	69 8d       	ldd	r22, Y+25	; 0x19
    2a48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e2       	ldi	r20, 0x20	; 32
    2a54:	51 e4       	ldi	r21, 0x41	; 65
    2a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	bc 01       	movw	r22, r24
    2a60:	cd 01       	movw	r24, r26
    2a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a66:	dc 01       	movw	r26, r24
    2a68:	cb 01       	movw	r24, r22
    2a6a:	9c 8b       	std	Y+20, r25	; 0x14
    2a6c:	8b 8b       	std	Y+19, r24	; 0x13
    2a6e:	0f c0       	rjmp	.+30     	; 0x2a8e <LCD_sendCommand+0x732>
    2a70:	89 e1       	ldi	r24, 0x19	; 25
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	9a 8b       	std	Y+18, r25	; 0x12
    2a76:	89 8b       	std	Y+17, r24	; 0x11
    2a78:	89 89       	ldd	r24, Y+17	; 0x11
    2a7a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	f1 f7       	brne	.-4      	; 0x2a7c <LCD_sendCommand+0x720>
    2a80:	9a 8b       	std	Y+18, r25	; 0x12
    2a82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a84:	8b 89       	ldd	r24, Y+19	; 0x13
    2a86:	9c 89       	ldd	r25, Y+20	; 0x14
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	9c 8b       	std	Y+20, r25	; 0x14
    2a8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a90:	9c 89       	ldd	r25, Y+20	; 0x14
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	69 f7       	brne	.-38     	; 0x2a70 <LCD_sendCommand+0x714>
    2a96:	14 c0       	rjmp	.+40     	; 0x2ac0 <LCD_sendCommand+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a98:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a9c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9e:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	9c 8b       	std	Y+20, r25	; 0x14
    2aaa:	8b 8b       	std	Y+19, r24	; 0x13
    2aac:	8b 89       	ldd	r24, Y+19	; 0x13
    2aae:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab0:	98 8b       	std	Y+16, r25	; 0x10
    2ab2:	8f 87       	std	Y+15, r24	; 0x0f
    2ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab6:	98 89       	ldd	r25, Y+16	; 0x10
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <LCD_sendCommand+0x75c>
    2abc:	98 8b       	std	Y+16, r25	; 0x10
    2abe:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ac0:	83 e0       	ldi	r24, 0x03	; 3
    2ac2:	66 e0       	ldi	r22, 0x06	; 6
    2ac4:	40 e0       	ldi	r20, 0x00	; 0
    2ac6:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_writePin>
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	a0 e8       	ldi	r26, 0x80	; 128
    2ad0:	bf e3       	ldi	r27, 0x3F	; 63
    2ad2:	8b 87       	std	Y+11, r24	; 0x0b
    2ad4:	9c 87       	std	Y+12, r25	; 0x0c
    2ad6:	ad 87       	std	Y+13, r26	; 0x0d
    2ad8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ada:	6b 85       	ldd	r22, Y+11	; 0x0b
    2adc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ade:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	4a e7       	ldi	r20, 0x7A	; 122
    2ae8:	53 e4       	ldi	r21, 0x43	; 67
    2aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	8f 83       	std	Y+7, r24	; 0x07
    2af4:	98 87       	std	Y+8, r25	; 0x08
    2af6:	a9 87       	std	Y+9, r26	; 0x09
    2af8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2afa:	6f 81       	ldd	r22, Y+7	; 0x07
    2afc:	78 85       	ldd	r23, Y+8	; 0x08
    2afe:	89 85       	ldd	r24, Y+9	; 0x09
    2b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e8       	ldi	r20, 0x80	; 128
    2b08:	5f e3       	ldi	r21, 0x3F	; 63
    2b0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b0e:	88 23       	and	r24, r24
    2b10:	2c f4       	brge	.+10     	; 0x2b1c <LCD_sendCommand+0x7c0>
		__ticks = 1;
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9e 83       	std	Y+6, r25	; 0x06
    2b18:	8d 83       	std	Y+5, r24	; 0x05
    2b1a:	3f c0       	rjmp	.+126    	; 0x2b9a <LCD_sendCommand+0x83e>
	else if (__tmp > 65535)
    2b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1e:	78 85       	ldd	r23, Y+8	; 0x08
    2b20:	89 85       	ldd	r24, Y+9	; 0x09
    2b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	3f ef       	ldi	r19, 0xFF	; 255
    2b28:	4f e7       	ldi	r20, 0x7F	; 127
    2b2a:	57 e4       	ldi	r21, 0x47	; 71
    2b2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b30:	18 16       	cp	r1, r24
    2b32:	4c f5       	brge	.+82     	; 0x2b86 <LCD_sendCommand+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b34:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b36:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b38:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e2       	ldi	r20, 0x20	; 32
    2b42:	51 e4       	ldi	r21, 0x41	; 65
    2b44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	bc 01       	movw	r22, r24
    2b4e:	cd 01       	movw	r24, r26
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9e 83       	std	Y+6, r25	; 0x06
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	0f c0       	rjmp	.+30     	; 0x2b7c <LCD_sendCommand+0x820>
    2b5e:	89 e1       	ldi	r24, 0x19	; 25
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	9c 83       	std	Y+4, r25	; 0x04
    2b64:	8b 83       	std	Y+3, r24	; 0x03
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6a:	01 97       	sbiw	r24, 0x01	; 1
    2b6c:	f1 f7       	brne	.-4      	; 0x2b6a <LCD_sendCommand+0x80e>
    2b6e:	9c 83       	std	Y+4, r25	; 0x04
    2b70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b72:	8d 81       	ldd	r24, Y+5	; 0x05
    2b74:	9e 81       	ldd	r25, Y+6	; 0x06
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	9e 83       	std	Y+6, r25	; 0x06
    2b7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	69 f7       	brne	.-38     	; 0x2b5e <LCD_sendCommand+0x802>
    2b84:	14 c0       	rjmp	.+40     	; 0x2bae <LCD_sendCommand+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b86:	6f 81       	ldd	r22, Y+7	; 0x07
    2b88:	78 85       	ldd	r23, Y+8	; 0x08
    2b8a:	89 85       	ldd	r24, Y+9	; 0x09
    2b8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	9e 83       	std	Y+6, r25	; 0x06
    2b98:	8d 83       	std	Y+5, r24	; 0x05
    2b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9e:	9a 83       	std	Y+2, r25	; 0x02
    2ba0:	89 83       	std	Y+1, r24	; 0x01
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <LCD_sendCommand+0x84a>
    2baa:	9a 83       	std	Y+2, r25	; 0x02
    2bac:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2bae:	cc 59       	subi	r28, 0x9C	; 156
    2bb0:	df 4f       	sbci	r29, 0xFF	; 255
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	1f 91       	pop	r17
    2bc2:	0f 91       	pop	r16
    2bc4:	08 95       	ret

00002bc6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2bc6:	0f 93       	push	r16
    2bc8:	1f 93       	push	r17
    2bca:	df 93       	push	r29
    2bcc:	cf 93       	push	r28
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    2bd2:	c4 56       	subi	r28, 0x64	; 100
    2bd4:	d0 40       	sbci	r29, 0x00	; 0
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	f8 94       	cli
    2bda:	de bf       	out	0x3e, r29	; 62
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	cd bf       	out	0x3d, r28	; 61
    2be0:	fe 01       	movw	r30, r28
    2be2:	ec 59       	subi	r30, 0x9C	; 156
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	80 83       	st	Z, r24
	uint8 lcd_port_value = 0;
    2be8:	fe 01       	movw	r30, r28
    2bea:	ed 59       	subi	r30, 0x9D	; 157
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	10 82       	st	Z, r1
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2bf0:	83 e0       	ldi	r24, 0x03	; 3
    2bf2:	64 e0       	ldi	r22, 0x04	; 4
    2bf4:	41 e0       	ldi	r20, 0x01	; 1
    2bf6:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2bfa:	83 e0       	ldi	r24, 0x03	; 3
    2bfc:	65 e0       	ldi	r22, 0x05	; 5
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_writePin>
    2c04:	fe 01       	movw	r30, r28
    2c06:	e1 5a       	subi	r30, 0xA1	; 161
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	a0 e8       	ldi	r26, 0x80	; 128
    2c10:	bf e3       	ldi	r27, 0x3F	; 63
    2c12:	80 83       	st	Z, r24
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	a2 83       	std	Z+2, r26	; 0x02
    2c18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1a:	8e 01       	movw	r16, r28
    2c1c:	05 5a       	subi	r16, 0xA5	; 165
    2c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c20:	fe 01       	movw	r30, r28
    2c22:	e1 5a       	subi	r30, 0xA1	; 161
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	60 81       	ld	r22, Z
    2c28:	71 81       	ldd	r23, Z+1	; 0x01
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	93 81       	ldd	r25, Z+3	; 0x03
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	4a e7       	ldi	r20, 0x7A	; 122
    2c34:	53 e4       	ldi	r21, 0x43	; 67
    2c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	f8 01       	movw	r30, r16
    2c40:	80 83       	st	Z, r24
    2c42:	91 83       	std	Z+1, r25	; 0x01
    2c44:	a2 83       	std	Z+2, r26	; 0x02
    2c46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e5 5a       	subi	r30, 0xA5	; 165
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	60 81       	ld	r22, Z
    2c50:	71 81       	ldd	r23, Z+1	; 0x01
    2c52:	82 81       	ldd	r24, Z+2	; 0x02
    2c54:	93 81       	ldd	r25, Z+3	; 0x03
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e8       	ldi	r20, 0x80	; 128
    2c5c:	5f e3       	ldi	r21, 0x3F	; 63
    2c5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c62:	88 23       	and	r24, r24
    2c64:	44 f4       	brge	.+16     	; 0x2c76 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2c66:	fe 01       	movw	r30, r28
    2c68:	e7 5a       	subi	r30, 0xA7	; 167
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	80 83       	st	Z, r24
    2c74:	64 c0       	rjmp	.+200    	; 0x2d3e <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2c76:	fe 01       	movw	r30, r28
    2c78:	e5 5a       	subi	r30, 0xA5	; 165
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	3f ef       	ldi	r19, 0xFF	; 255
    2c88:	4f e7       	ldi	r20, 0x7F	; 127
    2c8a:	57 e4       	ldi	r21, 0x47	; 71
    2c8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c90:	18 16       	cp	r1, r24
    2c92:	0c f0       	brlt	.+2      	; 0x2c96 <LCD_displayCharacter+0xd0>
    2c94:	43 c0       	rjmp	.+134    	; 0x2d1c <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c96:	fe 01       	movw	r30, r28
    2c98:	e1 5a       	subi	r30, 0xA1	; 161
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	60 81       	ld	r22, Z
    2c9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ca0:	82 81       	ldd	r24, Z+2	; 0x02
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e2       	ldi	r20, 0x20	; 32
    2caa:	51 e4       	ldi	r21, 0x41	; 65
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	8e 01       	movw	r16, r28
    2cb6:	07 5a       	subi	r16, 0xA7	; 167
    2cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	f8 01       	movw	r30, r16
    2cc8:	91 83       	std	Z+1, r25	; 0x01
    2cca:	80 83       	st	Z, r24
    2ccc:	1f c0       	rjmp	.+62     	; 0x2d0c <LCD_displayCharacter+0x146>
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e9 5a       	subi	r30, 0xA9	; 169
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	89 e1       	ldi	r24, 0x19	; 25
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	91 83       	std	Z+1, r25	; 0x01
    2cda:	80 83       	st	Z, r24
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e9 5a       	subi	r30, 0xA9	; 169
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 81       	ld	r24, Z
    2ce4:	91 81       	ldd	r25, Z+1	; 0x01
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <LCD_displayCharacter+0x120>
    2cea:	fe 01       	movw	r30, r28
    2cec:	e9 5a       	subi	r30, 0xA9	; 169
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf4:	de 01       	movw	r26, r28
    2cf6:	a7 5a       	subi	r26, 0xA7	; 167
    2cf8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e7 5a       	subi	r30, 0xA7	; 167
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	11 96       	adiw	r26, 0x01	; 1
    2d08:	9c 93       	st	X, r25
    2d0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e7 5a       	subi	r30, 0xA7	; 167
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	80 81       	ld	r24, Z
    2d14:	91 81       	ldd	r25, Z+1	; 0x01
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	d1 f6       	brne	.-76     	; 0x2cce <LCD_displayCharacter+0x108>
    2d1a:	27 c0       	rjmp	.+78     	; 0x2d6a <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1c:	8e 01       	movw	r16, r28
    2d1e:	07 5a       	subi	r16, 0xA7	; 167
    2d20:	1f 4f       	sbci	r17, 0xFF	; 255
    2d22:	fe 01       	movw	r30, r28
    2d24:	e5 5a       	subi	r30, 0xA5	; 165
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	60 81       	ld	r22, Z
    2d2a:	71 81       	ldd	r23, Z+1	; 0x01
    2d2c:	82 81       	ldd	r24, Z+2	; 0x02
    2d2e:	93 81       	ldd	r25, Z+3	; 0x03
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	f8 01       	movw	r30, r16
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	80 83       	st	Z, r24
    2d3e:	de 01       	movw	r26, r28
    2d40:	ab 5a       	subi	r26, 0xAB	; 171
    2d42:	bf 4f       	sbci	r27, 0xFF	; 255
    2d44:	fe 01       	movw	r30, r28
    2d46:	e7 5a       	subi	r30, 0xA7	; 167
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	80 81       	ld	r24, Z
    2d4c:	91 81       	ldd	r25, Z+1	; 0x01
    2d4e:	8d 93       	st	X+, r24
    2d50:	9c 93       	st	X, r25
    2d52:	fe 01       	movw	r30, r28
    2d54:	eb 5a       	subi	r30, 0xAB	; 171
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <LCD_displayCharacter+0x196>
    2d60:	fe 01       	movw	r30, r28
    2d62:	eb 5a       	subi	r30, 0xAB	; 171
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	91 83       	std	Z+1, r25	; 0x01
    2d68:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d6a:	83 e0       	ldi	r24, 0x03	; 3
    2d6c:	66 e0       	ldi	r22, 0x06	; 6
    2d6e:	41 e0       	ldi	r20, 0x01	; 1
    2d70:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_writePin>
    2d74:	fe 01       	movw	r30, r28
    2d76:	ef 5a       	subi	r30, 0xAF	; 175
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	a0 e8       	ldi	r26, 0x80	; 128
    2d80:	bf e3       	ldi	r27, 0x3F	; 63
    2d82:	80 83       	st	Z, r24
    2d84:	91 83       	std	Z+1, r25	; 0x01
    2d86:	a2 83       	std	Z+2, r26	; 0x02
    2d88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8a:	8e 01       	movw	r16, r28
    2d8c:	03 5b       	subi	r16, 0xB3	; 179
    2d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d90:	fe 01       	movw	r30, r28
    2d92:	ef 5a       	subi	r30, 0xAF	; 175
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	60 81       	ld	r22, Z
    2d98:	71 81       	ldd	r23, Z+1	; 0x01
    2d9a:	82 81       	ldd	r24, Z+2	; 0x02
    2d9c:	93 81       	ldd	r25, Z+3	; 0x03
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	4a e7       	ldi	r20, 0x7A	; 122
    2da4:	53 e4       	ldi	r21, 0x43	; 67
    2da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	f8 01       	movw	r30, r16
    2db0:	80 83       	st	Z, r24
    2db2:	91 83       	std	Z+1, r25	; 0x01
    2db4:	a2 83       	std	Z+2, r26	; 0x02
    2db6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2db8:	fe 01       	movw	r30, r28
    2dba:	e3 5b       	subi	r30, 0xB3	; 179
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	60 81       	ld	r22, Z
    2dc0:	71 81       	ldd	r23, Z+1	; 0x01
    2dc2:	82 81       	ldd	r24, Z+2	; 0x02
    2dc4:	93 81       	ldd	r25, Z+3	; 0x03
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e8       	ldi	r20, 0x80	; 128
    2dcc:	5f e3       	ldi	r21, 0x3F	; 63
    2dce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd2:	88 23       	and	r24, r24
    2dd4:	44 f4       	brge	.+16     	; 0x2de6 <LCD_displayCharacter+0x220>
		__ticks = 1;
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e5 5b       	subi	r30, 0xB5	; 181
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	80 83       	st	Z, r24
    2de4:	64 c0       	rjmp	.+200    	; 0x2eae <LCD_displayCharacter+0x2e8>
	else if (__tmp > 65535)
    2de6:	fe 01       	movw	r30, r28
    2de8:	e3 5b       	subi	r30, 0xB3	; 179
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	60 81       	ld	r22, Z
    2dee:	71 81       	ldd	r23, Z+1	; 0x01
    2df0:	82 81       	ldd	r24, Z+2	; 0x02
    2df2:	93 81       	ldd	r25, Z+3	; 0x03
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	3f ef       	ldi	r19, 0xFF	; 255
    2df8:	4f e7       	ldi	r20, 0x7F	; 127
    2dfa:	57 e4       	ldi	r21, 0x47	; 71
    2dfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e00:	18 16       	cp	r1, r24
    2e02:	0c f0       	brlt	.+2      	; 0x2e06 <LCD_displayCharacter+0x240>
    2e04:	43 c0       	rjmp	.+134    	; 0x2e8c <LCD_displayCharacter+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e06:	fe 01       	movw	r30, r28
    2e08:	ef 5a       	subi	r30, 0xAF	; 175
    2e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0c:	60 81       	ld	r22, Z
    2e0e:	71 81       	ldd	r23, Z+1	; 0x01
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	93 81       	ldd	r25, Z+3	; 0x03
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e2       	ldi	r20, 0x20	; 32
    2e1a:	51 e4       	ldi	r21, 0x41	; 65
    2e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	8e 01       	movw	r16, r28
    2e26:	05 5b       	subi	r16, 0xB5	; 181
    2e28:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2a:	bc 01       	movw	r22, r24
    2e2c:	cd 01       	movw	r24, r26
    2e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	f8 01       	movw	r30, r16
    2e38:	91 83       	std	Z+1, r25	; 0x01
    2e3a:	80 83       	st	Z, r24
    2e3c:	1f c0       	rjmp	.+62     	; 0x2e7c <LCD_displayCharacter+0x2b6>
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e7 5b       	subi	r30, 0xB7	; 183
    2e42:	ff 4f       	sbci	r31, 0xFF	; 255
    2e44:	89 e1       	ldi	r24, 0x19	; 25
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	91 83       	std	Z+1, r25	; 0x01
    2e4a:	80 83       	st	Z, r24
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e7 5b       	subi	r30, 0xB7	; 183
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 81       	ld	r24, Z
    2e54:	91 81       	ldd	r25, Z+1	; 0x01
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <LCD_displayCharacter+0x290>
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e7 5b       	subi	r30, 0xB7	; 183
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	91 83       	std	Z+1, r25	; 0x01
    2e62:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e64:	de 01       	movw	r26, r28
    2e66:	a5 5b       	subi	r26, 0xB5	; 181
    2e68:	bf 4f       	sbci	r27, 0xFF	; 255
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e5 5b       	subi	r30, 0xB5	; 181
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 81       	ld	r24, Z
    2e72:	91 81       	ldd	r25, Z+1	; 0x01
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	11 96       	adiw	r26, 0x01	; 1
    2e78:	9c 93       	st	X, r25
    2e7a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	e5 5b       	subi	r30, 0xB5	; 181
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	80 81       	ld	r24, Z
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	d1 f6       	brne	.-76     	; 0x2e3e <LCD_displayCharacter+0x278>
    2e8a:	27 c0       	rjmp	.+78     	; 0x2eda <LCD_displayCharacter+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e8c:	8e 01       	movw	r16, r28
    2e8e:	05 5b       	subi	r16, 0xB5	; 181
    2e90:	1f 4f       	sbci	r17, 0xFF	; 255
    2e92:	fe 01       	movw	r30, r28
    2e94:	e3 5b       	subi	r30, 0xB3	; 179
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	60 81       	ld	r22, Z
    2e9a:	71 81       	ldd	r23, Z+1	; 0x01
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	f8 01       	movw	r30, r16
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	80 83       	st	Z, r24
    2eae:	de 01       	movw	r26, r28
    2eb0:	a9 5b       	subi	r26, 0xB9	; 185
    2eb2:	bf 4f       	sbci	r27, 0xFF	; 255
    2eb4:	fe 01       	movw	r30, r28
    2eb6:	e5 5b       	subi	r30, 0xB5	; 181
    2eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eba:	80 81       	ld	r24, Z
    2ebc:	91 81       	ldd	r25, Z+1	; 0x01
    2ebe:	8d 93       	st	X+, r24
    2ec0:	9c 93       	st	X, r25
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e9 5b       	subi	r30, 0xB9	; 185
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 81       	ld	r24, Z
    2eca:	91 81       	ldd	r25, Z+1	; 0x01
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <LCD_displayCharacter+0x306>
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	e9 5b       	subi	r30, 0xB9	; 185
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	91 83       	std	Z+1, r25	; 0x01
    2ed8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    2eda:	82 e0       	ldi	r24, 0x02	; 2
    2edc:	0e 94 3c 10 	call	0x2078	; 0x2078 <GPIO_readPort>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	ed 59       	subi	r30, 0x9D	; 157
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | (data & 0xF0);
    2ee8:	fe 01       	movw	r30, r28
    2eea:	ed 59       	subi	r30, 0x9D	; 157
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 81       	ld	r24, Z
    2ef0:	98 2f       	mov	r25, r24
    2ef2:	9f 70       	andi	r25, 0x0F	; 15
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	ec 59       	subi	r30, 0x9C	; 156
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	80 81       	ld	r24, Z
    2efc:	80 7f       	andi	r24, 0xF0	; 240
    2efe:	89 2b       	or	r24, r25
    2f00:	fe 01       	movw	r30, r28
    2f02:	ed 59       	subi	r30, 0x9D	; 157
    2f04:	ff 4f       	sbci	r31, 0xFF	; 255
    2f06:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | ((data & 0xF0) >> 4);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    2f08:	fe 01       	movw	r30, r28
    2f0a:	ed 59       	subi	r30, 0x9D	; 157
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	82 e0       	ldi	r24, 0x02	; 2
    2f10:	60 81       	ld	r22, Z
    2f12:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <GPIO_writePort>
    2f16:	fe 01       	movw	r30, r28
    2f18:	ed 5b       	subi	r30, 0xBD	; 189
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	a0 e8       	ldi	r26, 0x80	; 128
    2f22:	bf e3       	ldi	r27, 0x3F	; 63
    2f24:	80 83       	st	Z, r24
    2f26:	91 83       	std	Z+1, r25	; 0x01
    2f28:	a2 83       	std	Z+2, r26	; 0x02
    2f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2c:	8e 01       	movw	r16, r28
    2f2e:	01 5c       	subi	r16, 0xC1	; 193
    2f30:	1f 4f       	sbci	r17, 0xFF	; 255
    2f32:	fe 01       	movw	r30, r28
    2f34:	ed 5b       	subi	r30, 0xBD	; 189
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	60 81       	ld	r22, Z
    2f3a:	71 81       	ldd	r23, Z+1	; 0x01
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	93 81       	ldd	r25, Z+3	; 0x03
    2f40:	20 e0       	ldi	r18, 0x00	; 0
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	4a e7       	ldi	r20, 0x7A	; 122
    2f46:	53 e4       	ldi	r21, 0x43	; 67
    2f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	f8 01       	movw	r30, r16
    2f52:	80 83       	st	Z, r24
    2f54:	91 83       	std	Z+1, r25	; 0x01
    2f56:	a2 83       	std	Z+2, r26	; 0x02
    2f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	ff 96       	adiw	r30, 0x3f	; 63
    2f5e:	60 81       	ld	r22, Z
    2f60:	71 81       	ldd	r23, Z+1	; 0x01
    2f62:	82 81       	ldd	r24, Z+2	; 0x02
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	2c f4       	brge	.+10     	; 0x2f80 <LCD_displayCharacter+0x3ba>
		__ticks = 1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9e af       	std	Y+62, r25	; 0x3e
    2f7c:	8d af       	std	Y+61, r24	; 0x3d
    2f7e:	46 c0       	rjmp	.+140    	; 0x300c <LCD_displayCharacter+0x446>
	else if (__tmp > 65535)
    2f80:	fe 01       	movw	r30, r28
    2f82:	ff 96       	adiw	r30, 0x3f	; 63
    2f84:	60 81       	ld	r22, Z
    2f86:	71 81       	ldd	r23, Z+1	; 0x01
    2f88:	82 81       	ldd	r24, Z+2	; 0x02
    2f8a:	93 81       	ldd	r25, Z+3	; 0x03
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	3f ef       	ldi	r19, 0xFF	; 255
    2f90:	4f e7       	ldi	r20, 0x7F	; 127
    2f92:	57 e4       	ldi	r21, 0x47	; 71
    2f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f98:	18 16       	cp	r1, r24
    2f9a:	64 f5       	brge	.+88     	; 0x2ff4 <LCD_displayCharacter+0x42e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	ed 5b       	subi	r30, 0xBD	; 189
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	60 81       	ld	r22, Z
    2fa4:	71 81       	ldd	r23, Z+1	; 0x01
    2fa6:	82 81       	ldd	r24, Z+2	; 0x02
    2fa8:	93 81       	ldd	r25, Z+3	; 0x03
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e2       	ldi	r20, 0x20	; 32
    2fb0:	51 e4       	ldi	r21, 0x41	; 65
    2fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	9e af       	std	Y+62, r25	; 0x3e
    2fc8:	8d af       	std	Y+61, r24	; 0x3d
    2fca:	0f c0       	rjmp	.+30     	; 0x2fea <LCD_displayCharacter+0x424>
    2fcc:	89 e1       	ldi	r24, 0x19	; 25
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	9c af       	std	Y+60, r25	; 0x3c
    2fd2:	8b af       	std	Y+59, r24	; 0x3b
    2fd4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fd6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <LCD_displayCharacter+0x412>
    2fdc:	9c af       	std	Y+60, r25	; 0x3c
    2fde:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fe2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	9e af       	std	Y+62, r25	; 0x3e
    2fe8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fea:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fec:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	69 f7       	brne	.-38     	; 0x2fcc <LCD_displayCharacter+0x406>
    2ff2:	16 c0       	rjmp	.+44     	; 0x3020 <LCD_displayCharacter+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff4:	fe 01       	movw	r30, r28
    2ff6:	ff 96       	adiw	r30, 0x3f	; 63
    2ff8:	60 81       	ld	r22, Z
    2ffa:	71 81       	ldd	r23, Z+1	; 0x01
    2ffc:	82 81       	ldd	r24, Z+2	; 0x02
    2ffe:	93 81       	ldd	r25, Z+3	; 0x03
    3000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	9e af       	std	Y+62, r25	; 0x3e
    300a:	8d af       	std	Y+61, r24	; 0x3d
    300c:	8d ad       	ldd	r24, Y+61	; 0x3d
    300e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3010:	9a af       	std	Y+58, r25	; 0x3a
    3012:	89 af       	std	Y+57, r24	; 0x39
    3014:	89 ad       	ldd	r24, Y+57	; 0x39
    3016:	9a ad       	ldd	r25, Y+58	; 0x3a
    3018:	01 97       	sbiw	r24, 0x01	; 1
    301a:	f1 f7       	brne	.-4      	; 0x3018 <LCD_displayCharacter+0x452>
    301c:	9a af       	std	Y+58, r25	; 0x3a
    301e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3020:	83 e0       	ldi	r24, 0x03	; 3
    3022:	66 e0       	ldi	r22, 0x06	; 6
    3024:	40 e0       	ldi	r20, 0x00	; 0
    3026:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_writePin>
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	a0 e8       	ldi	r26, 0x80	; 128
    3030:	bf e3       	ldi	r27, 0x3F	; 63
    3032:	8d ab       	std	Y+53, r24	; 0x35
    3034:	9e ab       	std	Y+54, r25	; 0x36
    3036:	af ab       	std	Y+55, r26	; 0x37
    3038:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303a:	6d a9       	ldd	r22, Y+53	; 0x35
    303c:	7e a9       	ldd	r23, Y+54	; 0x36
    303e:	8f a9       	ldd	r24, Y+55	; 0x37
    3040:	98 ad       	ldd	r25, Y+56	; 0x38
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	4a e7       	ldi	r20, 0x7A	; 122
    3048:	53 e4       	ldi	r21, 0x43	; 67
    304a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	89 ab       	std	Y+49, r24	; 0x31
    3054:	9a ab       	std	Y+50, r25	; 0x32
    3056:	ab ab       	std	Y+51, r26	; 0x33
    3058:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    305a:	69 a9       	ldd	r22, Y+49	; 0x31
    305c:	7a a9       	ldd	r23, Y+50	; 0x32
    305e:	8b a9       	ldd	r24, Y+51	; 0x33
    3060:	9c a9       	ldd	r25, Y+52	; 0x34
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e8       	ldi	r20, 0x80	; 128
    3068:	5f e3       	ldi	r21, 0x3F	; 63
    306a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    306e:	88 23       	and	r24, r24
    3070:	2c f4       	brge	.+10     	; 0x307c <LCD_displayCharacter+0x4b6>
		__ticks = 1;
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	98 ab       	std	Y+48, r25	; 0x30
    3078:	8f a7       	std	Y+47, r24	; 0x2f
    307a:	3f c0       	rjmp	.+126    	; 0x30fa <LCD_displayCharacter+0x534>
	else if (__tmp > 65535)
    307c:	69 a9       	ldd	r22, Y+49	; 0x31
    307e:	7a a9       	ldd	r23, Y+50	; 0x32
    3080:	8b a9       	ldd	r24, Y+51	; 0x33
    3082:	9c a9       	ldd	r25, Y+52	; 0x34
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	3f ef       	ldi	r19, 0xFF	; 255
    3088:	4f e7       	ldi	r20, 0x7F	; 127
    308a:	57 e4       	ldi	r21, 0x47	; 71
    308c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3090:	18 16       	cp	r1, r24
    3092:	4c f5       	brge	.+82     	; 0x30e6 <LCD_displayCharacter+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3094:	6d a9       	ldd	r22, Y+53	; 0x35
    3096:	7e a9       	ldd	r23, Y+54	; 0x36
    3098:	8f a9       	ldd	r24, Y+55	; 0x37
    309a:	98 ad       	ldd	r25, Y+56	; 0x38
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e2       	ldi	r20, 0x20	; 32
    30a2:	51 e4       	ldi	r21, 0x41	; 65
    30a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	bc 01       	movw	r22, r24
    30ae:	cd 01       	movw	r24, r26
    30b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	98 ab       	std	Y+48, r25	; 0x30
    30ba:	8f a7       	std	Y+47, r24	; 0x2f
    30bc:	0f c0       	rjmp	.+30     	; 0x30dc <LCD_displayCharacter+0x516>
    30be:	89 e1       	ldi	r24, 0x19	; 25
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	9e a7       	std	Y+46, r25	; 0x2e
    30c4:	8d a7       	std	Y+45, r24	; 0x2d
    30c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    30c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    30ca:	01 97       	sbiw	r24, 0x01	; 1
    30cc:	f1 f7       	brne	.-4      	; 0x30ca <LCD_displayCharacter+0x504>
    30ce:	9e a7       	std	Y+46, r25	; 0x2e
    30d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30d4:	98 a9       	ldd	r25, Y+48	; 0x30
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	98 ab       	std	Y+48, r25	; 0x30
    30da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    30de:	98 a9       	ldd	r25, Y+48	; 0x30
    30e0:	00 97       	sbiw	r24, 0x00	; 0
    30e2:	69 f7       	brne	.-38     	; 0x30be <LCD_displayCharacter+0x4f8>
    30e4:	14 c0       	rjmp	.+40     	; 0x310e <LCD_displayCharacter+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e6:	69 a9       	ldd	r22, Y+49	; 0x31
    30e8:	7a a9       	ldd	r23, Y+50	; 0x32
    30ea:	8b a9       	ldd	r24, Y+51	; 0x33
    30ec:	9c a9       	ldd	r25, Y+52	; 0x34
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	98 ab       	std	Y+48, r25	; 0x30
    30f8:	8f a7       	std	Y+47, r24	; 0x2f
    30fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    30fc:	98 a9       	ldd	r25, Y+48	; 0x30
    30fe:	9c a7       	std	Y+44, r25	; 0x2c
    3100:	8b a7       	std	Y+43, r24	; 0x2b
    3102:	8b a5       	ldd	r24, Y+43	; 0x2b
    3104:	9c a5       	ldd	r25, Y+44	; 0x2c
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	f1 f7       	brne	.-4      	; 0x3106 <LCD_displayCharacter+0x540>
    310a:	9c a7       	std	Y+44, r25	; 0x2c
    310c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    310e:	83 e0       	ldi	r24, 0x03	; 3
    3110:	66 e0       	ldi	r22, 0x06	; 6
    3112:	41 e0       	ldi	r20, 0x01	; 1
    3114:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_writePin>
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	a0 e8       	ldi	r26, 0x80	; 128
    311e:	bf e3       	ldi	r27, 0x3F	; 63
    3120:	8f a3       	std	Y+39, r24	; 0x27
    3122:	98 a7       	std	Y+40, r25	; 0x28
    3124:	a9 a7       	std	Y+41, r26	; 0x29
    3126:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3128:	6f a1       	ldd	r22, Y+39	; 0x27
    312a:	78 a5       	ldd	r23, Y+40	; 0x28
    312c:	89 a5       	ldd	r24, Y+41	; 0x29
    312e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	4a e7       	ldi	r20, 0x7A	; 122
    3136:	53 e4       	ldi	r21, 0x43	; 67
    3138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    313c:	dc 01       	movw	r26, r24
    313e:	cb 01       	movw	r24, r22
    3140:	8b a3       	std	Y+35, r24	; 0x23
    3142:	9c a3       	std	Y+36, r25	; 0x24
    3144:	ad a3       	std	Y+37, r26	; 0x25
    3146:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3148:	6b a1       	ldd	r22, Y+35	; 0x23
    314a:	7c a1       	ldd	r23, Y+36	; 0x24
    314c:	8d a1       	ldd	r24, Y+37	; 0x25
    314e:	9e a1       	ldd	r25, Y+38	; 0x26
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	40 e8       	ldi	r20, 0x80	; 128
    3156:	5f e3       	ldi	r21, 0x3F	; 63
    3158:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    315c:	88 23       	and	r24, r24
    315e:	2c f4       	brge	.+10     	; 0x316a <LCD_displayCharacter+0x5a4>
		__ticks = 1;
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	9a a3       	std	Y+34, r25	; 0x22
    3166:	89 a3       	std	Y+33, r24	; 0x21
    3168:	3f c0       	rjmp	.+126    	; 0x31e8 <LCD_displayCharacter+0x622>
	else if (__tmp > 65535)
    316a:	6b a1       	ldd	r22, Y+35	; 0x23
    316c:	7c a1       	ldd	r23, Y+36	; 0x24
    316e:	8d a1       	ldd	r24, Y+37	; 0x25
    3170:	9e a1       	ldd	r25, Y+38	; 0x26
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	3f ef       	ldi	r19, 0xFF	; 255
    3176:	4f e7       	ldi	r20, 0x7F	; 127
    3178:	57 e4       	ldi	r21, 0x47	; 71
    317a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    317e:	18 16       	cp	r1, r24
    3180:	4c f5       	brge	.+82     	; 0x31d4 <LCD_displayCharacter+0x60e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3182:	6f a1       	ldd	r22, Y+39	; 0x27
    3184:	78 a5       	ldd	r23, Y+40	; 0x28
    3186:	89 a5       	ldd	r24, Y+41	; 0x29
    3188:	9a a5       	ldd	r25, Y+42	; 0x2a
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e2       	ldi	r20, 0x20	; 32
    3190:	51 e4       	ldi	r21, 0x41	; 65
    3192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	bc 01       	movw	r22, r24
    319c:	cd 01       	movw	r24, r26
    319e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	9a a3       	std	Y+34, r25	; 0x22
    31a8:	89 a3       	std	Y+33, r24	; 0x21
    31aa:	0f c0       	rjmp	.+30     	; 0x31ca <LCD_displayCharacter+0x604>
    31ac:	89 e1       	ldi	r24, 0x19	; 25
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	98 a3       	std	Y+32, r25	; 0x20
    31b2:	8f 8f       	std	Y+31, r24	; 0x1f
    31b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31b6:	98 a1       	ldd	r25, Y+32	; 0x20
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	f1 f7       	brne	.-4      	; 0x31b8 <LCD_displayCharacter+0x5f2>
    31bc:	98 a3       	std	Y+32, r25	; 0x20
    31be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c0:	89 a1       	ldd	r24, Y+33	; 0x21
    31c2:	9a a1       	ldd	r25, Y+34	; 0x22
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	9a a3       	std	Y+34, r25	; 0x22
    31c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ca:	89 a1       	ldd	r24, Y+33	; 0x21
    31cc:	9a a1       	ldd	r25, Y+34	; 0x22
    31ce:	00 97       	sbiw	r24, 0x00	; 0
    31d0:	69 f7       	brne	.-38     	; 0x31ac <LCD_displayCharacter+0x5e6>
    31d2:	14 c0       	rjmp	.+40     	; 0x31fc <LCD_displayCharacter+0x636>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31d4:	6b a1       	ldd	r22, Y+35	; 0x23
    31d6:	7c a1       	ldd	r23, Y+36	; 0x24
    31d8:	8d a1       	ldd	r24, Y+37	; 0x25
    31da:	9e a1       	ldd	r25, Y+38	; 0x26
    31dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	9a a3       	std	Y+34, r25	; 0x22
    31e6:	89 a3       	std	Y+33, r24	; 0x21
    31e8:	89 a1       	ldd	r24, Y+33	; 0x21
    31ea:	9a a1       	ldd	r25, Y+34	; 0x22
    31ec:	9e 8f       	std	Y+30, r25	; 0x1e
    31ee:	8d 8f       	std	Y+29, r24	; 0x1d
    31f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31f4:	01 97       	sbiw	r24, 0x01	; 1
    31f6:	f1 f7       	brne	.-4      	; 0x31f4 <LCD_displayCharacter+0x62e>
    31f8:	9e 8f       	std	Y+30, r25	; 0x1e
    31fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the first 4 bits of the required data to the data bus D4 --> D7 */
	lcd_port_value = GPIO_readPort(LCD_DATA_PORT_ID);
    31fc:	82 e0       	ldi	r24, 0x02	; 2
    31fe:	0e 94 3c 10 	call	0x2078	; 0x2078 <GPIO_readPort>
    3202:	fe 01       	movw	r30, r28
    3204:	ed 59       	subi	r30, 0x9D	; 157
    3206:	ff 4f       	sbci	r31, 0xFF	; 255
    3208:	80 83       	st	Z, r24
#ifdef LCD_LAST_PORT_PINS
	lcd_port_value = (lcd_port_value & 0x0F) | ((data & 0x0F) << 4);
    320a:	fe 01       	movw	r30, r28
    320c:	ed 59       	subi	r30, 0x9D	; 157
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	80 81       	ld	r24, Z
    3212:	28 2f       	mov	r18, r24
    3214:	2f 70       	andi	r18, 0x0F	; 15
    3216:	fe 01       	movw	r30, r28
    3218:	ec 59       	subi	r30, 0x9C	; 156
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	80 81       	ld	r24, Z
    321e:	88 2f       	mov	r24, r24
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	82 95       	swap	r24
    3224:	92 95       	swap	r25
    3226:	90 7f       	andi	r25, 0xF0	; 240
    3228:	98 27       	eor	r25, r24
    322a:	80 7f       	andi	r24, 0xF0	; 240
    322c:	98 27       	eor	r25, r24
    322e:	82 2b       	or	r24, r18
    3230:	fe 01       	movw	r30, r28
    3232:	ed 59       	subi	r30, 0x9D	; 157
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	80 83       	st	Z, r24
#else
	lcd_port_value = (lcd_port_value & 0xF0) | (data & 0x0F);
#endif
	GPIO_writePort(LCD_DATA_PORT_ID,lcd_port_value);
    3238:	fe 01       	movw	r30, r28
    323a:	ed 59       	subi	r30, 0x9D	; 157
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	82 e0       	ldi	r24, 0x02	; 2
    3240:	60 81       	ld	r22, Z
    3242:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <GPIO_writePort>
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	a0 e8       	ldi	r26, 0x80	; 128
    324c:	bf e3       	ldi	r27, 0x3F	; 63
    324e:	89 8f       	std	Y+25, r24	; 0x19
    3250:	9a 8f       	std	Y+26, r25	; 0x1a
    3252:	ab 8f       	std	Y+27, r26	; 0x1b
    3254:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3256:	69 8d       	ldd	r22, Y+25	; 0x19
    3258:	7a 8d       	ldd	r23, Y+26	; 0x1a
    325a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    325c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	4a e7       	ldi	r20, 0x7A	; 122
    3264:	53 e4       	ldi	r21, 0x43	; 67
    3266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	8d 8b       	std	Y+21, r24	; 0x15
    3270:	9e 8b       	std	Y+22, r25	; 0x16
    3272:	af 8b       	std	Y+23, r26	; 0x17
    3274:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3276:	6d 89       	ldd	r22, Y+21	; 0x15
    3278:	7e 89       	ldd	r23, Y+22	; 0x16
    327a:	8f 89       	ldd	r24, Y+23	; 0x17
    327c:	98 8d       	ldd	r25, Y+24	; 0x18
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	40 e8       	ldi	r20, 0x80	; 128
    3284:	5f e3       	ldi	r21, 0x3F	; 63
    3286:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    328a:	88 23       	and	r24, r24
    328c:	2c f4       	brge	.+10     	; 0x3298 <LCD_displayCharacter+0x6d2>
		__ticks = 1;
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	9c 8b       	std	Y+20, r25	; 0x14
    3294:	8b 8b       	std	Y+19, r24	; 0x13
    3296:	3f c0       	rjmp	.+126    	; 0x3316 <LCD_displayCharacter+0x750>
	else if (__tmp > 65535)
    3298:	6d 89       	ldd	r22, Y+21	; 0x15
    329a:	7e 89       	ldd	r23, Y+22	; 0x16
    329c:	8f 89       	ldd	r24, Y+23	; 0x17
    329e:	98 8d       	ldd	r25, Y+24	; 0x18
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	3f ef       	ldi	r19, 0xFF	; 255
    32a4:	4f e7       	ldi	r20, 0x7F	; 127
    32a6:	57 e4       	ldi	r21, 0x47	; 71
    32a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ac:	18 16       	cp	r1, r24
    32ae:	4c f5       	brge	.+82     	; 0x3302 <LCD_displayCharacter+0x73c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32b0:	69 8d       	ldd	r22, Y+25	; 0x19
    32b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	40 e2       	ldi	r20, 0x20	; 32
    32be:	51 e4       	ldi	r21, 0x41	; 65
    32c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	bc 01       	movw	r22, r24
    32ca:	cd 01       	movw	r24, r26
    32cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	9c 8b       	std	Y+20, r25	; 0x14
    32d6:	8b 8b       	std	Y+19, r24	; 0x13
    32d8:	0f c0       	rjmp	.+30     	; 0x32f8 <LCD_displayCharacter+0x732>
    32da:	89 e1       	ldi	r24, 0x19	; 25
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	9a 8b       	std	Y+18, r25	; 0x12
    32e0:	89 8b       	std	Y+17, r24	; 0x11
    32e2:	89 89       	ldd	r24, Y+17	; 0x11
    32e4:	9a 89       	ldd	r25, Y+18	; 0x12
    32e6:	01 97       	sbiw	r24, 0x01	; 1
    32e8:	f1 f7       	brne	.-4      	; 0x32e6 <LCD_displayCharacter+0x720>
    32ea:	9a 8b       	std	Y+18, r25	; 0x12
    32ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ee:	8b 89       	ldd	r24, Y+19	; 0x13
    32f0:	9c 89       	ldd	r25, Y+20	; 0x14
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	9c 8b       	std	Y+20, r25	; 0x14
    32f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32f8:	8b 89       	ldd	r24, Y+19	; 0x13
    32fa:	9c 89       	ldd	r25, Y+20	; 0x14
    32fc:	00 97       	sbiw	r24, 0x00	; 0
    32fe:	69 f7       	brne	.-38     	; 0x32da <LCD_displayCharacter+0x714>
    3300:	14 c0       	rjmp	.+40     	; 0x332a <LCD_displayCharacter+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3302:	6d 89       	ldd	r22, Y+21	; 0x15
    3304:	7e 89       	ldd	r23, Y+22	; 0x16
    3306:	8f 89       	ldd	r24, Y+23	; 0x17
    3308:	98 8d       	ldd	r25, Y+24	; 0x18
    330a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	9c 8b       	std	Y+20, r25	; 0x14
    3314:	8b 8b       	std	Y+19, r24	; 0x13
    3316:	8b 89       	ldd	r24, Y+19	; 0x13
    3318:	9c 89       	ldd	r25, Y+20	; 0x14
    331a:	98 8b       	std	Y+16, r25	; 0x10
    331c:	8f 87       	std	Y+15, r24	; 0x0f
    331e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3320:	98 89       	ldd	r25, Y+16	; 0x10
    3322:	01 97       	sbiw	r24, 0x01	; 1
    3324:	f1 f7       	brne	.-4      	; 0x3322 <LCD_displayCharacter+0x75c>
    3326:	98 8b       	std	Y+16, r25	; 0x10
    3328:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    332a:	83 e0       	ldi	r24, 0x03	; 3
    332c:	66 e0       	ldi	r22, 0x06	; 6
    332e:	40 e0       	ldi	r20, 0x00	; 0
    3330:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <GPIO_writePin>
    3334:	80 e0       	ldi	r24, 0x00	; 0
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	a0 e8       	ldi	r26, 0x80	; 128
    333a:	bf e3       	ldi	r27, 0x3F	; 63
    333c:	8b 87       	std	Y+11, r24	; 0x0b
    333e:	9c 87       	std	Y+12, r25	; 0x0c
    3340:	ad 87       	std	Y+13, r26	; 0x0d
    3342:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3344:	6b 85       	ldd	r22, Y+11	; 0x0b
    3346:	7c 85       	ldd	r23, Y+12	; 0x0c
    3348:	8d 85       	ldd	r24, Y+13	; 0x0d
    334a:	9e 85       	ldd	r25, Y+14	; 0x0e
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	4a e7       	ldi	r20, 0x7A	; 122
    3352:	53 e4       	ldi	r21, 0x43	; 67
    3354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	8f 83       	std	Y+7, r24	; 0x07
    335e:	98 87       	std	Y+8, r25	; 0x08
    3360:	a9 87       	std	Y+9, r26	; 0x09
    3362:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3364:	6f 81       	ldd	r22, Y+7	; 0x07
    3366:	78 85       	ldd	r23, Y+8	; 0x08
    3368:	89 85       	ldd	r24, Y+9	; 0x09
    336a:	9a 85       	ldd	r25, Y+10	; 0x0a
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	40 e8       	ldi	r20, 0x80	; 128
    3372:	5f e3       	ldi	r21, 0x3F	; 63
    3374:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3378:	88 23       	and	r24, r24
    337a:	2c f4       	brge	.+10     	; 0x3386 <LCD_displayCharacter+0x7c0>
		__ticks = 1;
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	9e 83       	std	Y+6, r25	; 0x06
    3382:	8d 83       	std	Y+5, r24	; 0x05
    3384:	3f c0       	rjmp	.+126    	; 0x3404 <LCD_displayCharacter+0x83e>
	else if (__tmp > 65535)
    3386:	6f 81       	ldd	r22, Y+7	; 0x07
    3388:	78 85       	ldd	r23, Y+8	; 0x08
    338a:	89 85       	ldd	r24, Y+9	; 0x09
    338c:	9a 85       	ldd	r25, Y+10	; 0x0a
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	3f ef       	ldi	r19, 0xFF	; 255
    3392:	4f e7       	ldi	r20, 0x7F	; 127
    3394:	57 e4       	ldi	r21, 0x47	; 71
    3396:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    339a:	18 16       	cp	r1, r24
    339c:	4c f5       	brge	.+82     	; 0x33f0 <LCD_displayCharacter+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339e:	6b 85       	ldd	r22, Y+11	; 0x0b
    33a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	40 e2       	ldi	r20, 0x20	; 32
    33ac:	51 e4       	ldi	r21, 0x41	; 65
    33ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	9e 83       	std	Y+6, r25	; 0x06
    33c4:	8d 83       	std	Y+5, r24	; 0x05
    33c6:	0f c0       	rjmp	.+30     	; 0x33e6 <LCD_displayCharacter+0x820>
    33c8:	89 e1       	ldi	r24, 0x19	; 25
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	9c 83       	std	Y+4, r25	; 0x04
    33ce:	8b 83       	std	Y+3, r24	; 0x03
    33d0:	8b 81       	ldd	r24, Y+3	; 0x03
    33d2:	9c 81       	ldd	r25, Y+4	; 0x04
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	f1 f7       	brne	.-4      	; 0x33d4 <LCD_displayCharacter+0x80e>
    33d8:	9c 83       	std	Y+4, r25	; 0x04
    33da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33dc:	8d 81       	ldd	r24, Y+5	; 0x05
    33de:	9e 81       	ldd	r25, Y+6	; 0x06
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	9e 83       	std	Y+6, r25	; 0x06
    33e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e6:	8d 81       	ldd	r24, Y+5	; 0x05
    33e8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ea:	00 97       	sbiw	r24, 0x00	; 0
    33ec:	69 f7       	brne	.-38     	; 0x33c8 <LCD_displayCharacter+0x802>
    33ee:	14 c0       	rjmp	.+40     	; 0x3418 <LCD_displayCharacter+0x852>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f0:	6f 81       	ldd	r22, Y+7	; 0x07
    33f2:	78 85       	ldd	r23, Y+8	; 0x08
    33f4:	89 85       	ldd	r24, Y+9	; 0x09
    33f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	9e 83       	std	Y+6, r25	; 0x06
    3402:	8d 83       	std	Y+5, r24	; 0x05
    3404:	8d 81       	ldd	r24, Y+5	; 0x05
    3406:	9e 81       	ldd	r25, Y+6	; 0x06
    3408:	9a 83       	std	Y+2, r25	; 0x02
    340a:	89 83       	std	Y+1, r24	; 0x01
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	9a 81       	ldd	r25, Y+2	; 0x02
    3410:	01 97       	sbiw	r24, 0x01	; 1
    3412:	f1 f7       	brne	.-4      	; 0x3410 <LCD_displayCharacter+0x84a>
    3414:	9a 83       	std	Y+2, r25	; 0x02
    3416:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3418:	cc 59       	subi	r28, 0x9C	; 156
    341a:	df 4f       	sbci	r29, 0xFF	; 255
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	08 95       	ret

00003430 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	00 d0       	rcall	.+0      	; 0x3436 <LCD_displayString+0x6>
    3436:	0f 92       	push	r0
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	9b 83       	std	Y+3, r25	; 0x03
    343e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3440:	19 82       	std	Y+1, r1	; 0x01
    3442:	0e c0       	rjmp	.+28     	; 0x3460 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3444:	89 81       	ldd	r24, Y+1	; 0x01
    3446:	28 2f       	mov	r18, r24
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	8a 81       	ldd	r24, Y+2	; 0x02
    344c:	9b 81       	ldd	r25, Y+3	; 0x03
    344e:	fc 01       	movw	r30, r24
    3450:	e2 0f       	add	r30, r18
    3452:	f3 1f       	adc	r31, r19
    3454:	80 81       	ld	r24, Z
    3456:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_displayCharacter>
		i++;
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	8f 5f       	subi	r24, 0xFF	; 255
    345e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3460:	89 81       	ldd	r24, Y+1	; 0x01
    3462:	28 2f       	mov	r18, r24
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	8a 81       	ldd	r24, Y+2	; 0x02
    3468:	9b 81       	ldd	r25, Y+3	; 0x03
    346a:	fc 01       	movw	r30, r24
    346c:	e2 0f       	add	r30, r18
    346e:	f3 1f       	adc	r31, r19
    3470:	80 81       	ld	r24, Z
    3472:	88 23       	and	r24, r24
    3474:	39 f7       	brne	.-50     	; 0x3444 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    3476:	0f 90       	pop	r0
    3478:	0f 90       	pop	r0
    347a:	0f 90       	pop	r0
    347c:	cf 91       	pop	r28
    347e:	df 91       	pop	r29
    3480:	08 95       	ret

00003482 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3482:	df 93       	push	r29
    3484:	cf 93       	push	r28
    3486:	00 d0       	rcall	.+0      	; 0x3488 <LCD_moveCursor+0x6>
    3488:	00 d0       	rcall	.+0      	; 0x348a <LCD_moveCursor+0x8>
    348a:	0f 92       	push	r0
    348c:	cd b7       	in	r28, 0x3d	; 61
    348e:	de b7       	in	r29, 0x3e	; 62
    3490:	8a 83       	std	Y+2, r24	; 0x02
    3492:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3494:	8a 81       	ldd	r24, Y+2	; 0x02
    3496:	28 2f       	mov	r18, r24
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	3d 83       	std	Y+5, r19	; 0x05
    349c:	2c 83       	std	Y+4, r18	; 0x04
    349e:	8c 81       	ldd	r24, Y+4	; 0x04
    34a0:	9d 81       	ldd	r25, Y+5	; 0x05
    34a2:	81 30       	cpi	r24, 0x01	; 1
    34a4:	91 05       	cpc	r25, r1
    34a6:	c1 f0       	breq	.+48     	; 0x34d8 <LCD_moveCursor+0x56>
    34a8:	2c 81       	ldd	r18, Y+4	; 0x04
    34aa:	3d 81       	ldd	r19, Y+5	; 0x05
    34ac:	22 30       	cpi	r18, 0x02	; 2
    34ae:	31 05       	cpc	r19, r1
    34b0:	2c f4       	brge	.+10     	; 0x34bc <LCD_moveCursor+0x3a>
    34b2:	8c 81       	ldd	r24, Y+4	; 0x04
    34b4:	9d 81       	ldd	r25, Y+5	; 0x05
    34b6:	00 97       	sbiw	r24, 0x00	; 0
    34b8:	61 f0       	breq	.+24     	; 0x34d2 <LCD_moveCursor+0x50>
    34ba:	19 c0       	rjmp	.+50     	; 0x34ee <LCD_moveCursor+0x6c>
    34bc:	2c 81       	ldd	r18, Y+4	; 0x04
    34be:	3d 81       	ldd	r19, Y+5	; 0x05
    34c0:	22 30       	cpi	r18, 0x02	; 2
    34c2:	31 05       	cpc	r19, r1
    34c4:	69 f0       	breq	.+26     	; 0x34e0 <LCD_moveCursor+0x5e>
    34c6:	8c 81       	ldd	r24, Y+4	; 0x04
    34c8:	9d 81       	ldd	r25, Y+5	; 0x05
    34ca:	83 30       	cpi	r24, 0x03	; 3
    34cc:	91 05       	cpc	r25, r1
    34ce:	61 f0       	breq	.+24     	; 0x34e8 <LCD_moveCursor+0x66>
    34d0:	0e c0       	rjmp	.+28     	; 0x34ee <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    34d2:	8b 81       	ldd	r24, Y+3	; 0x03
    34d4:	89 83       	std	Y+1, r24	; 0x01
    34d6:	0b c0       	rjmp	.+22     	; 0x34ee <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    34d8:	8b 81       	ldd	r24, Y+3	; 0x03
    34da:	80 5c       	subi	r24, 0xC0	; 192
    34dc:	89 83       	std	Y+1, r24	; 0x01
    34de:	07 c0       	rjmp	.+14     	; 0x34ee <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    34e0:	8b 81       	ldd	r24, Y+3	; 0x03
    34e2:	80 5f       	subi	r24, 0xF0	; 240
    34e4:	89 83       	std	Y+1, r24	; 0x01
    34e6:	03 c0       	rjmp	.+6      	; 0x34ee <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	80 5b       	subi	r24, 0xB0	; 176
    34ec:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	80 68       	ori	r24, 0x80	; 128
    34f2:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
}
    34f6:	0f 90       	pop	r0
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	00 d0       	rcall	.+0      	; 0x350c <LCD_displayStringRowColumn+0x6>
    350c:	00 d0       	rcall	.+0      	; 0x350e <LCD_displayStringRowColumn+0x8>
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
    3512:	89 83       	std	Y+1, r24	; 0x01
    3514:	6a 83       	std	Y+2, r22	; 0x02
    3516:	5c 83       	std	Y+4, r21	; 0x04
    3518:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	6a 81       	ldd	r22, Y+2	; 0x02
    351e:	0e 94 41 1a 	call	0x3482	; 0x3482 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3522:	8b 81       	ldd	r24, Y+3	; 0x03
    3524:	9c 81       	ldd	r25, Y+4	; 0x04
    3526:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
}
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	0f 90       	pop	r0
    3530:	0f 90       	pop	r0
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	08 95       	ret

00003538 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	62 97       	sbiw	r28, 0x12	; 18
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	9a 8b       	std	Y+18, r25	; 0x12
    354e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3550:	89 89       	ldd	r24, Y+17	; 0x11
    3552:	9a 89       	ldd	r25, Y+18	; 0x12
    3554:	9e 01       	movw	r18, r28
    3556:	2f 5f       	subi	r18, 0xFF	; 255
    3558:	3f 4f       	sbci	r19, 0xFF	; 255
    355a:	b9 01       	movw	r22, r18
    355c:	4a e0       	ldi	r20, 0x0A	; 10
    355e:	50 e0       	ldi	r21, 0x00	; 0
    3560:	0e 94 38 1c 	call	0x3870	; 0x3870 <itoa>
   LCD_displayString(buff); /* Display the string */
    3564:	ce 01       	movw	r24, r28
    3566:	01 96       	adiw	r24, 0x01	; 1
    3568:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
}
    356c:	62 96       	adiw	r28, 0x12	; 18
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	08 95       	ret

0000357e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
}
    358c:	cf 91       	pop	r28
    358e:	df 91       	pop	r29
    3590:	08 95       	ret

00003592 <HMI_enterPass>:
/*******************************************************************************
 *                      Function Definition                                  *
 *******************************************************************************/

void HMI_enterPass(uint8* arr)
{
    3592:	0f 93       	push	r16
    3594:	1f 93       	push	r17
    3596:	df 93       	push	r29
    3598:	cf 93       	push	r28
    359a:	cd b7       	in	r28, 0x3d	; 61
    359c:	de b7       	in	r29, 0x3e	; 62
    359e:	61 97       	sbiw	r28, 0x11	; 17
    35a0:	0f b6       	in	r0, 0x3f	; 63
    35a2:	f8 94       	cli
    35a4:	de bf       	out	0x3e, r29	; 62
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	cd bf       	out	0x3d, r28	; 61
    35aa:	99 8b       	std	Y+17, r25	; 0x11
    35ac:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i =0;
    35ae:	1f 86       	std	Y+15, r1	; 0x0f
	do
	{
		arr[i] = KEYPAD_getPressedKey();
    35b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35b2:	28 2f       	mov	r18, r24
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	88 89       	ldd	r24, Y+16	; 0x10
    35b8:	99 89       	ldd	r25, Y+17	; 0x11
    35ba:	8c 01       	movw	r16, r24
    35bc:	02 0f       	add	r16, r18
    35be:	13 1f       	adc	r17, r19
    35c0:	0e 94 81 10 	call	0x2102	; 0x2102 <KEYPAD_getPressedKey>
    35c4:	f8 01       	movw	r30, r16
    35c6:	80 83       	st	Z, r24
		if(arr[i] != ENTER)
    35c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ca:	28 2f       	mov	r18, r24
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	88 89       	ldd	r24, Y+16	; 0x10
    35d0:	99 89       	ldd	r25, Y+17	; 0x11
    35d2:	fc 01       	movw	r30, r24
    35d4:	e2 0f       	add	r30, r18
    35d6:	f3 1f       	adc	r31, r19
    35d8:	80 81       	ld	r24, Z
    35da:	8d 30       	cpi	r24, 0x0D	; 13
    35dc:	19 f0       	breq	.+6      	; 0x35e4 <HMI_enterPass+0x52>
		{
			LCD_displayCharacter('*');
    35de:	8a e2       	ldi	r24, 0x2A	; 42
    35e0:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <LCD_displayCharacter>
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	aa ef       	ldi	r26, 0xFA	; 250
    35ea:	b3 e4       	ldi	r27, 0x43	; 67
    35ec:	8b 87       	std	Y+11, r24	; 0x0b
    35ee:	9c 87       	std	Y+12, r25	; 0x0c
    35f0:	ad 87       	std	Y+13, r26	; 0x0d
    35f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	4a ef       	ldi	r20, 0xFA	; 250
    3602:	54 e4       	ldi	r21, 0x44	; 68
    3604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	8f 83       	std	Y+7, r24	; 0x07
    360e:	98 87       	std	Y+8, r25	; 0x08
    3610:	a9 87       	std	Y+9, r26	; 0x09
    3612:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3614:	6f 81       	ldd	r22, Y+7	; 0x07
    3616:	78 85       	ldd	r23, Y+8	; 0x08
    3618:	89 85       	ldd	r24, Y+9	; 0x09
    361a:	9a 85       	ldd	r25, Y+10	; 0x0a
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e8       	ldi	r20, 0x80	; 128
    3622:	5f e3       	ldi	r21, 0x3F	; 63
    3624:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3628:	88 23       	and	r24, r24
    362a:	2c f4       	brge	.+10     	; 0x3636 <HMI_enterPass+0xa4>
		__ticks = 1;
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	9e 83       	std	Y+6, r25	; 0x06
    3632:	8d 83       	std	Y+5, r24	; 0x05
    3634:	3f c0       	rjmp	.+126    	; 0x36b4 <HMI_enterPass+0x122>
	else if (__tmp > 65535)
    3636:	6f 81       	ldd	r22, Y+7	; 0x07
    3638:	78 85       	ldd	r23, Y+8	; 0x08
    363a:	89 85       	ldd	r24, Y+9	; 0x09
    363c:	9a 85       	ldd	r25, Y+10	; 0x0a
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	3f ef       	ldi	r19, 0xFF	; 255
    3642:	4f e7       	ldi	r20, 0x7F	; 127
    3644:	57 e4       	ldi	r21, 0x47	; 71
    3646:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    364a:	18 16       	cp	r1, r24
    364c:	4c f5       	brge	.+82     	; 0x36a0 <HMI_enterPass+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3650:	7c 85       	ldd	r23, Y+12	; 0x0c
    3652:	8d 85       	ldd	r24, Y+13	; 0x0d
    3654:	9e 85       	ldd	r25, Y+14	; 0x0e
    3656:	20 e0       	ldi	r18, 0x00	; 0
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	40 e2       	ldi	r20, 0x20	; 32
    365c:	51 e4       	ldi	r21, 0x41	; 65
    365e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	bc 01       	movw	r22, r24
    3668:	cd 01       	movw	r24, r26
    366a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	9e 83       	std	Y+6, r25	; 0x06
    3674:	8d 83       	std	Y+5, r24	; 0x05
    3676:	0f c0       	rjmp	.+30     	; 0x3696 <HMI_enterPass+0x104>
    3678:	88 ec       	ldi	r24, 0xC8	; 200
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	9c 83       	std	Y+4, r25	; 0x04
    367e:	8b 83       	std	Y+3, r24	; 0x03
    3680:	8b 81       	ldd	r24, Y+3	; 0x03
    3682:	9c 81       	ldd	r25, Y+4	; 0x04
    3684:	01 97       	sbiw	r24, 0x01	; 1
    3686:	f1 f7       	brne	.-4      	; 0x3684 <HMI_enterPass+0xf2>
    3688:	9c 83       	std	Y+4, r25	; 0x04
    368a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368c:	8d 81       	ldd	r24, Y+5	; 0x05
    368e:	9e 81       	ldd	r25, Y+6	; 0x06
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	9e 83       	std	Y+6, r25	; 0x06
    3694:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3696:	8d 81       	ldd	r24, Y+5	; 0x05
    3698:	9e 81       	ldd	r25, Y+6	; 0x06
    369a:	00 97       	sbiw	r24, 0x00	; 0
    369c:	69 f7       	brne	.-38     	; 0x3678 <HMI_enterPass+0xe6>
    369e:	14 c0       	rjmp	.+40     	; 0x36c8 <HMI_enterPass+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a0:	6f 81       	ldd	r22, Y+7	; 0x07
    36a2:	78 85       	ldd	r23, Y+8	; 0x08
    36a4:	89 85       	ldd	r24, Y+9	; 0x09
    36a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	9e 83       	std	Y+6, r25	; 0x06
    36b2:	8d 83       	std	Y+5, r24	; 0x05
    36b4:	8d 81       	ldd	r24, Y+5	; 0x05
    36b6:	9e 81       	ldd	r25, Y+6	; 0x06
    36b8:	9a 83       	std	Y+2, r25	; 0x02
    36ba:	89 83       	std	Y+1, r24	; 0x01
    36bc:	89 81       	ldd	r24, Y+1	; 0x01
    36be:	9a 81       	ldd	r25, Y+2	; 0x02
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	f1 f7       	brne	.-4      	; 0x36c0 <HMI_enterPass+0x12e>
    36c4:	9a 83       	std	Y+2, r25	; 0x02
    36c6:	89 83       	std	Y+1, r24	; 0x01
		}
		/* Wait 500msec before getting a new press from the keypad buttons, Press time is 500msec */
		_delay_ms(500);
		i++;
    36c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ca:	8f 5f       	subi	r24, 0xFF	; 255
    36cc:	8f 87       	std	Y+15, r24	; 0x0f
	}while(arr[i-1] != ENTER);
    36ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d0:	88 2f       	mov	r24, r24
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	9c 01       	movw	r18, r24
    36d6:	21 50       	subi	r18, 0x01	; 1
    36d8:	30 40       	sbci	r19, 0x00	; 0
    36da:	88 89       	ldd	r24, Y+16	; 0x10
    36dc:	99 89       	ldd	r25, Y+17	; 0x11
    36de:	fc 01       	movw	r30, r24
    36e0:	e2 0f       	add	r30, r18
    36e2:	f3 1f       	adc	r31, r19
    36e4:	80 81       	ld	r24, Z
    36e6:	8d 30       	cpi	r24, 0x0D	; 13
    36e8:	09 f0       	breq	.+2      	; 0x36ec <HMI_enterPass+0x15a>
    36ea:	62 cf       	rjmp	.-316    	; 0x35b0 <HMI_enterPass+0x1e>
}
    36ec:	61 96       	adiw	r28, 0x11	; 17
    36ee:	0f b6       	in	r0, 0x3f	; 63
    36f0:	f8 94       	cli
    36f2:	de bf       	out	0x3e, r29	; 62
    36f4:	0f be       	out	0x3f, r0	; 63
    36f6:	cd bf       	out	0x3d, r28	; 61
    36f8:	cf 91       	pop	r28
    36fa:	df 91       	pop	r29
    36fc:	1f 91       	pop	r17
    36fe:	0f 91       	pop	r16
    3700:	08 95       	ret

00003702 <HMI_unlockDoor>:

void HMI_unlockDoor(void)
{
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(HMI_ECU_READY);
    370a:	80 e1       	ldi	r24, 0x10	; 16
    370c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
	while(UART_recieveByte() != CONTROL_ECU_READY){}
    3710:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
    3714:	80 32       	cpi	r24, 0x20	; 32
    3716:	e1 f7       	brne	.-8      	; 0x3710 <HMI_unlockDoor+0xe>
	UART_sendByte(OPEN_DOOR);
    3718:	85 e5       	ldi	r24, 0x55	; 85
    371a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
	LCD_displayString("Open the door");
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	91 e0       	ldi	r25, 0x01	; 1
    3728:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
	LCD_moveCursor(1,0);
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	0e 94 41 1a 	call	0x3482	; 0x3482 <LCD_moveCursor>
	LCD_displayString("Welcome!");
    3734:	8e e0       	ldi	r24, 0x0E	; 14
    3736:	91 e0       	ldi	r25, 0x01	; 1
    3738:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
	Timers01_Init(&TIMER0_Config);
    373c:	89 e2       	ldi	r24, 0x29	; 41
    373e:	91 e0       	ldi	r25, 0x01	; 1
    3740:	0e 94 ce 0a 	call	0x159c	; 0x159c <Timers01_Init>
	while(door_unlocked != 1){}
    3744:	80 91 33 01 	lds	r24, 0x0133
    3748:	81 30       	cpi	r24, 0x01	; 1
    374a:	e1 f7       	brne	.-8      	; 0x3744 <HMI_unlockDoor+0x42>
	door_unlocked = 0;
    374c:	10 92 33 01 	sts	0x0133, r1
	while(door_locking != 1){}
    3750:	80 91 34 01 	lds	r24, 0x0134
    3754:	81 30       	cpi	r24, 0x01	; 1
    3756:	e1 f7       	brne	.-8      	; 0x3750 <HMI_unlockDoor+0x4e>
	door_locking = 0;
    3758:	10 92 34 01 	sts	0x0134, r1
	while(door_locked != 1){}
    375c:	80 91 35 01 	lds	r24, 0x0135
    3760:	81 30       	cpi	r24, 0x01	; 1
    3762:	e1 f7       	brne	.-8      	; 0x375c <HMI_unlockDoor+0x5a>
	door_locked = 0;
    3764:	10 92 35 01 	sts	0x0135, r1
	Timers_DeInit(TIMER0);
    3768:	80 e0       	ldi	r24, 0x00	; 0
    376a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <Timers_DeInit>
}
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	08 95       	ret

00003774 <HMI_alarm>:

void HMI_alarm(void)
{
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(HMI_ECU_READY);
    377c:	80 e1       	ldi	r24, 0x10	; 16
    377e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
	while(UART_recieveByte() != CONTROL_ECU_READY){}
    3782:	0e 94 c8 0c 	call	0x1990	; 0x1990 <UART_recieveByte>
    3786:	80 32       	cpi	r24, 0x20	; 32
    3788:	e1 f7       	brne	.-8      	; 0x3782 <HMI_alarm+0xe>
	UART_sendByte(ALARM);
    378a:	84 e4       	ldi	r24, 0x44	; 68
    378c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <UART_sendByte>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	0e 94 ae 11 	call	0x235c	; 0x235c <LCD_sendCommand>
	LCD_displayString("Error !!!");
    3796:	87 e1       	ldi	r24, 0x17	; 23
    3798:	91 e0       	ldi	r25, 0x01	; 1
    379a:	0e 94 18 1a 	call	0x3430	; 0x3430 <LCD_displayString>
	Timers01_Init(&TIMER0_Config);
    379e:	89 e2       	ldi	r24, 0x29	; 41
    37a0:	91 e0       	ldi	r25, 0x01	; 1
    37a2:	0e 94 ce 0a 	call	0x159c	; 0x159c <Timers01_Init>
	while(error_msg != 1){}
    37a6:	80 91 32 01 	lds	r24, 0x0132
    37aa:	81 30       	cpi	r24, 0x01	; 1
    37ac:	e1 f7       	brne	.-8      	; 0x37a6 <HMI_alarm+0x32>
	Timers_DeInit(TIMER0);
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <Timers_DeInit>
	error_msg = 0;
    37b4:	10 92 32 01 	sts	0x0132, r1
}
    37b8:	cf 91       	pop	r28
    37ba:	df 91       	pop	r29
    37bc:	08 95       	ret

000037be <__udivmodsi4>:
    37be:	a1 e2       	ldi	r26, 0x21	; 33
    37c0:	1a 2e       	mov	r1, r26
    37c2:	aa 1b       	sub	r26, r26
    37c4:	bb 1b       	sub	r27, r27
    37c6:	fd 01       	movw	r30, r26
    37c8:	0d c0       	rjmp	.+26     	; 0x37e4 <__udivmodsi4_ep>

000037ca <__udivmodsi4_loop>:
    37ca:	aa 1f       	adc	r26, r26
    37cc:	bb 1f       	adc	r27, r27
    37ce:	ee 1f       	adc	r30, r30
    37d0:	ff 1f       	adc	r31, r31
    37d2:	a2 17       	cp	r26, r18
    37d4:	b3 07       	cpc	r27, r19
    37d6:	e4 07       	cpc	r30, r20
    37d8:	f5 07       	cpc	r31, r21
    37da:	20 f0       	brcs	.+8      	; 0x37e4 <__udivmodsi4_ep>
    37dc:	a2 1b       	sub	r26, r18
    37de:	b3 0b       	sbc	r27, r19
    37e0:	e4 0b       	sbc	r30, r20
    37e2:	f5 0b       	sbc	r31, r21

000037e4 <__udivmodsi4_ep>:
    37e4:	66 1f       	adc	r22, r22
    37e6:	77 1f       	adc	r23, r23
    37e8:	88 1f       	adc	r24, r24
    37ea:	99 1f       	adc	r25, r25
    37ec:	1a 94       	dec	r1
    37ee:	69 f7       	brne	.-38     	; 0x37ca <__udivmodsi4_loop>
    37f0:	60 95       	com	r22
    37f2:	70 95       	com	r23
    37f4:	80 95       	com	r24
    37f6:	90 95       	com	r25
    37f8:	9b 01       	movw	r18, r22
    37fa:	ac 01       	movw	r20, r24
    37fc:	bd 01       	movw	r22, r26
    37fe:	cf 01       	movw	r24, r30
    3800:	08 95       	ret

00003802 <__prologue_saves__>:
    3802:	2f 92       	push	r2
    3804:	3f 92       	push	r3
    3806:	4f 92       	push	r4
    3808:	5f 92       	push	r5
    380a:	6f 92       	push	r6
    380c:	7f 92       	push	r7
    380e:	8f 92       	push	r8
    3810:	9f 92       	push	r9
    3812:	af 92       	push	r10
    3814:	bf 92       	push	r11
    3816:	cf 92       	push	r12
    3818:	df 92       	push	r13
    381a:	ef 92       	push	r14
    381c:	ff 92       	push	r15
    381e:	0f 93       	push	r16
    3820:	1f 93       	push	r17
    3822:	cf 93       	push	r28
    3824:	df 93       	push	r29
    3826:	cd b7       	in	r28, 0x3d	; 61
    3828:	de b7       	in	r29, 0x3e	; 62
    382a:	ca 1b       	sub	r28, r26
    382c:	db 0b       	sbc	r29, r27
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	09 94       	ijmp

0000383a <__epilogue_restores__>:
    383a:	2a 88       	ldd	r2, Y+18	; 0x12
    383c:	39 88       	ldd	r3, Y+17	; 0x11
    383e:	48 88       	ldd	r4, Y+16	; 0x10
    3840:	5f 84       	ldd	r5, Y+15	; 0x0f
    3842:	6e 84       	ldd	r6, Y+14	; 0x0e
    3844:	7d 84       	ldd	r7, Y+13	; 0x0d
    3846:	8c 84       	ldd	r8, Y+12	; 0x0c
    3848:	9b 84       	ldd	r9, Y+11	; 0x0b
    384a:	aa 84       	ldd	r10, Y+10	; 0x0a
    384c:	b9 84       	ldd	r11, Y+9	; 0x09
    384e:	c8 84       	ldd	r12, Y+8	; 0x08
    3850:	df 80       	ldd	r13, Y+7	; 0x07
    3852:	ee 80       	ldd	r14, Y+6	; 0x06
    3854:	fd 80       	ldd	r15, Y+5	; 0x05
    3856:	0c 81       	ldd	r16, Y+4	; 0x04
    3858:	1b 81       	ldd	r17, Y+3	; 0x03
    385a:	aa 81       	ldd	r26, Y+2	; 0x02
    385c:	b9 81       	ldd	r27, Y+1	; 0x01
    385e:	ce 0f       	add	r28, r30
    3860:	d1 1d       	adc	r29, r1
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	f8 94       	cli
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	cd bf       	out	0x3d, r28	; 61
    386c:	ed 01       	movw	r28, r26
    386e:	08 95       	ret

00003870 <itoa>:
    3870:	fb 01       	movw	r30, r22
    3872:	9f 01       	movw	r18, r30
    3874:	e8 94       	clt
    3876:	42 30       	cpi	r20, 0x02	; 2
    3878:	c4 f0       	brlt	.+48     	; 0x38aa <itoa+0x3a>
    387a:	45 32       	cpi	r20, 0x25	; 37
    387c:	b4 f4       	brge	.+44     	; 0x38aa <itoa+0x3a>
    387e:	4a 30       	cpi	r20, 0x0A	; 10
    3880:	29 f4       	brne	.+10     	; 0x388c <itoa+0x1c>
    3882:	97 fb       	bst	r25, 7
    3884:	1e f4       	brtc	.+6      	; 0x388c <itoa+0x1c>
    3886:	90 95       	com	r25
    3888:	81 95       	neg	r24
    388a:	9f 4f       	sbci	r25, 0xFF	; 255
    388c:	64 2f       	mov	r22, r20
    388e:	77 27       	eor	r23, r23
    3890:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <__udivmodhi4>
    3894:	80 5d       	subi	r24, 0xD0	; 208
    3896:	8a 33       	cpi	r24, 0x3A	; 58
    3898:	0c f0       	brlt	.+2      	; 0x389c <itoa+0x2c>
    389a:	89 5d       	subi	r24, 0xD9	; 217
    389c:	81 93       	st	Z+, r24
    389e:	cb 01       	movw	r24, r22
    38a0:	00 97       	sbiw	r24, 0x00	; 0
    38a2:	a1 f7       	brne	.-24     	; 0x388c <itoa+0x1c>
    38a4:	16 f4       	brtc	.+4      	; 0x38aa <itoa+0x3a>
    38a6:	5d e2       	ldi	r21, 0x2D	; 45
    38a8:	51 93       	st	Z+, r21
    38aa:	10 82       	st	Z, r1
    38ac:	c9 01       	movw	r24, r18
    38ae:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <strrev>

000038b2 <strrev>:
    38b2:	dc 01       	movw	r26, r24
    38b4:	fc 01       	movw	r30, r24
    38b6:	67 2f       	mov	r22, r23
    38b8:	71 91       	ld	r23, Z+
    38ba:	77 23       	and	r23, r23
    38bc:	e1 f7       	brne	.-8      	; 0x38b6 <strrev+0x4>
    38be:	32 97       	sbiw	r30, 0x02	; 2
    38c0:	04 c0       	rjmp	.+8      	; 0x38ca <strrev+0x18>
    38c2:	7c 91       	ld	r23, X
    38c4:	6d 93       	st	X+, r22
    38c6:	70 83       	st	Z, r23
    38c8:	62 91       	ld	r22, -Z
    38ca:	ae 17       	cp	r26, r30
    38cc:	bf 07       	cpc	r27, r31
    38ce:	c8 f3       	brcs	.-14     	; 0x38c2 <strrev+0x10>
    38d0:	08 95       	ret

000038d2 <__udivmodhi4>:
    38d2:	aa 1b       	sub	r26, r26
    38d4:	bb 1b       	sub	r27, r27
    38d6:	51 e1       	ldi	r21, 0x11	; 17
    38d8:	07 c0       	rjmp	.+14     	; 0x38e8 <__udivmodhi4_ep>

000038da <__udivmodhi4_loop>:
    38da:	aa 1f       	adc	r26, r26
    38dc:	bb 1f       	adc	r27, r27
    38de:	a6 17       	cp	r26, r22
    38e0:	b7 07       	cpc	r27, r23
    38e2:	10 f0       	brcs	.+4      	; 0x38e8 <__udivmodhi4_ep>
    38e4:	a6 1b       	sub	r26, r22
    38e6:	b7 0b       	sbc	r27, r23

000038e8 <__udivmodhi4_ep>:
    38e8:	88 1f       	adc	r24, r24
    38ea:	99 1f       	adc	r25, r25
    38ec:	5a 95       	dec	r21
    38ee:	a9 f7       	brne	.-22     	; 0x38da <__udivmodhi4_loop>
    38f0:	80 95       	com	r24
    38f2:	90 95       	com	r25
    38f4:	bc 01       	movw	r22, r24
    38f6:	cd 01       	movw	r24, r26
    38f8:	08 95       	ret

000038fa <_exit>:
    38fa:	f8 94       	cli

000038fc <__stop_program>:
    38fc:	ff cf       	rjmp	.-2      	; 0x38fc <__stop_program>
